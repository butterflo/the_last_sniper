//==================================================================================================
// 
// Generated Map Script
// 
// Name:   The Last Sniper
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library: STARCODE v1.4
//--------------------------------------------------------------------------------------------------
// Function Declarations
void lib1_gf_StarcodeStartCode ();
void lib1_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue);
void lib1_gf_StarcodeSetCode (string lp_code);
void lib1_gf_StarcodeSetEncryptionAlphabet (string lp_string);
string lib1_gf_StarcodeGetCode ();
int lib1_gf_StarcodeGetIntegerValue (int lp_maximumValue);
string lib1_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key);
string lib1_gf_StarcodeCompressString (string lp_toCompress);
string lib1_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel);
string lib1_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel);
bool lib1_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel);
string lib1_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key);
string lib1_gf_StarcodeDecompressString (string lp_toDecompress);

//--------------------------------------------------------------------------------------------------
// Library: STARCODE v1.4
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Source
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
 
 
string STARCODE_Alphabet="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%/()=?,.-;:_^#+* @{[]}|~`"; //
int STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
string STARCODE_CurrentCode="0";
string STARCODE_fill(string s, int i){
    int c=i-StringLength(s);
    string t="";
    while(c>0){
        t+="0";
        c-=1;
    }
    return t+s;
}
string STARCODE_cut(string s){
    int i=1;
    while(i<StringLength(s) && StringSub(s,i,i)=="0"){
        i+=1;
    }
    return StringSub(s,i,StringLength(s));
}
string STARCODE_BigNumAdd(string number, string addition){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int la=StringLength(addition);
    string out="";
    if(la>ln){
        number=STARCODE_fill(number, la);
        ln=la;
    }else if(ln>la){
        addition=STARCODE_fill(addition, ln);
        la=ln;
    }
 
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) + StringToInt( StringSub(addition, la-i,la-i) );
        out=IntToString( (c+carry) % 10 ) +out;
        carry=(c+carry) / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    return out;
}
string STARCODE_BigNumSubtract(string number, string subtraction){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ls=StringLength(subtraction);
    string out="";
    if(ls>ln){
        number=STARCODE_fill(number, ls);
        ln=ls;
    }else if(ln>ls){
        subtraction=STARCODE_fill(subtraction, ln);
        ls=ln;
    }
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) - StringToInt( StringSub(subtraction, ls-i,ls-i) );
        c-=carry;
        if(c<0){
            carry=1;
            c+=10;
        }else{
            carry=0;
        }
        out=IntToString( c ) +out;
        i+=1;
    }
    //if (carry>0){
        //debug("This bigint is not suited for negative numbers!");
    //}
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumMultiply(string number, string multi){
    int i=0;
    int m=StringToInt(multi);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int lm=StringLength(multi);
    string out="";
    while(i<ln){
        c=(StringToInt(StringSub(number, ln-i,ln-i)) * m)+carry;
        out=IntToString( (c % 10) ) +out;
        carry=c / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    if(multi=="0"){
        out="0";
    }
    //debug(out);
    return out;
}
string STARCODE_BigNumDivive(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        out+=IntToString( c / d );
        carry=c % d;
        i+=1;
    }
    if (carry>0){
        //debug("Left: "+IntToString(carry));
    }
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumModulo(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        carry=c % d;
        i+=1;
    }
    //debug(IntToString(carry));
    return IntToString(carry);
}
string STARCODE_BigNumPower(string number, int pow){
    string out=number;
    if (pow>0){
        while(pow>1){
            out=STARCODE_BigNumMultiply(out, number);
            pow-=1;
        }
        return out;
    }else{
        return "1";
    }
}
string STARCODE_Encode(string s, int i, int max){
    return STARCODE_BigNumAdd(STARCODE_BigNumMultiply(s, IntToString(max)), IntToString(i));
}
int STARCODE_Decode(string s, int max){
    return StringToInt(STARCODE_BigNumModulo(s, IntToString(max)));
}
string STARCODE_Decode2(string s, int max){
    return STARCODE_BigNumDivive(s, IntToString(max));
}
string STARCODE_chr(int i){
    return StringSub(STARCODE_Alphabet, i+1,i+1);
}
int STARCODE_ord(string i){
    return StringFind(STARCODE_Alphabet, i, c_stringCase)-1;
}
string STARCODE_shiftForward(string s, string k){
    return STARCODE_chr((STARCODE_ord(s)+STARCODE_ord(k)) % STARCODE_AlphabetLength);
}
string STARCODE_shiftBackward(string s, string k){
    int c=STARCODE_ord(s)-STARCODE_ord(k);
    if (c<0){
        return STARCODE_chr((c+STARCODE_AlphabetLength)%STARCODE_AlphabetLength);
    }
    else{
        return STARCODE_chr(c % STARCODE_AlphabetLength);
    }
}
string STARCODE_Encrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftForward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Decrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftBackward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Base10ToN(string current, int baseN){
    string n=IntToString(baseN);    
    string remainder="";
    string out="";
    
    while (current!="0"){
        remainder=STARCODE_BigNumModulo(current, n);
        out= STARCODE_chr(StringToInt(remainder)) + out;
        current=STARCODE_BigNumDivive(current, n);
    }
    return out;
}
string STARCODE_BaseNTo10(string current, int baseN){
    string out="0";
    string base=IntToString(baseN);
    int l=StringLength(current);
    int i=1;
    while(i<=l){
        out=STARCODE_BigNumAdd(out, STARCODE_BigNumMultiply(STARCODE_BigNumPower(base, l-i), IntToString(STARCODE_ord(StringSub(current, i,i)))) );
        i+=1;
    }
    return out;
}
string STARCODE_Hash(string toHash, int keyLength){
    int i=StringLength(toHash);
    string out="0";
    while(i>0){
        out=STARCODE_BigNumAdd(out, IntToString(  STARCODE_ord(StringSub(toHash,i,i)) * i  ));
        i-=1;
    }
    
    return STARCODE_fill(STARCODE_Base10ToN(STARCODE_BigNumModulo(out, IntToString( FixedToInt(Pow(STARCODE_AlphabetLength, keyLength)) )), STARCODE_AlphabetLength), keyLength);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: READ ME
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
//
//    
//    SC2Mapster.com
//    http://forums.sc2mapster.com/development/galaxy-scripting-and-trigger-lib/5091-library-starcode-v1-3/
//    Credits to vjeux
//
//
//  DOCUMENTATION:
//
//  Before you start using STARCODE you should know a couple of things:
//
//    1) STARCODE is still somewhat experimental. There could very well be bugs 
//       or glitches left in the system. During my tests I have fixed everything
//       I noticed, but that is no guarantee that it's always work under every 
//       circumstances. The system is rather messy too.
//       I haven't noticed any lags during my tests, but I believe that it could be
//       quite a bit faster with optimized functions.
//       Not my problem, at the moment.
//
//    2) I have tested STARCODE with dozens of integer values and generated codes of
//       up to 100 digits length without problems. After that, however, the system 
//       often hits StarCraft II's execution limit. Since I cannot disable this limit
//       you should try not to make codes longer than 100 digits.
//       You can, however, just create several codes with 100 digits length each.
//
//    3) The generated code length can change, even if you haven't added or removed any
//       integers. 
//       That is because the closer an integer's value is to it's maximum value, the more
//       space it needs in the code.
//       So to get the maximum code length you have to set all stored integer's values to
//       their respective maximum values.
//       Keep this in mind when you are storing your codes in a bank.
//       When the codes' length is already close to the maximum size of the bank, you should
//       check whether the code can possibly exceed the bank size.
//
//    4) There is a public function called Set Encryption Alphabet.
//       You should leave this function alone, unless you have a good reason to use it and know
//       what you are doing.
//       One reason could be to remove some characters from the alphabet so that they
//       won't be used in the code anymore.
//       The default alphabet is:
//
//       "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&/()=?,.-;:_^#+*' @{[]}|>"
//
//       You can add and remove characters as you like. However, you should always keep the first
//       ten characters (all numbers) at it's place, or some functions might return strange
//       results.
//       Also note that I have excluded "<" and "\" from the alphabet.
//       "\" is an escape characters so it's of no use to us.
//       "<" could be potentially dangerous. If you want to display your code and there happens
//       to be a sequence such as "<abc>" in there, StarCraft II will recongize this as a tag
//       and not display it. Thus you would get wrong results. I left ">" in because it won't
//       cause any harm on it's own.
//
//
//  Ok, I think I have mentioned everything. 
//  You can take a look at the Example Usage trigger to see how STARCODE can be used.
//
//  
//
// ~ s3rius
//

void lib1_InitCustomScript () {
}

// Functions
void lib1_gf_StarcodeStartCode () {
    // Automatic Variable Declarations
    // Implementation
        STARCODE_CurrentCode = "0";
}

void lib1_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue) {
    // Automatic Variable Declarations
    // Implementation
    if(lp_value<lp_maximumValue+1){
        STARCODE_CurrentCode=STARCODE_Encode(STARCODE_CurrentCode, lp_value, lp_maximumValue+1);
    }else{
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Error! Starcode tried to save a value larger than it's maximum!"));
    }
}

void lib1_gf_StarcodeSetCode (string lp_code) {
    // Automatic Variable Declarations
    // Implementation
    STARCODE_CurrentCode=lp_code;
}

void lib1_gf_StarcodeSetEncryptionAlphabet (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    STARCODE_Alphabet=lp_string;
    STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
}

string lib1_gf_StarcodeGetCode () {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_CurrentCode;
}

int lib1_gf_StarcodeGetIntegerValue (int lp_maximumValue) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_i=STARCODE_Decode(STARCODE_CurrentCode, lp_maximumValue+1);
    STARCODE_CurrentCode=STARCODE_Decode2(STARCODE_CurrentCode, lp_maximumValue+1); //advance in the code
    return lv_i;
}

string lib1_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Encrypt(lp_toEncrypt, lp_key);
}

string lib1_gf_StarcodeCompressString (string lp_toCompress) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Base10ToN(lp_toCompress, STARCODE_AlphabetLength);
}

string lib1_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Hash(lp_toHash, lp_securityLevel)+lp_toHash;
}

string lib1_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return StringSub(lp_string,lp_securityLevel+1, StringLength(lp_string));
}

bool lib1_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Hash(StringSub(lp_toCheck,lp_securityLevel+1, StringLength(lp_toCheck)), lp_securityLevel)==StringSub(lp_toCheck,1, lp_securityLevel);
}

string lib1_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Decrypt(lp_toDecrypt, lp_key);
}

string lib1_gf_StarcodeDecompressString (string lp_toDecompress) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_BaseNTo10(lp_toDecompress, STARCODE_AlphabetLength);
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitCustomScript();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_var_forest_array = 16;
const int gv_const_maxdisc = 10;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_disc {
    string[7] lv_dummy_array;
    int[gv_const_maxdisc + 1] lv_playerhandle;
    int[gv_const_maxdisc + 1] lv_bANK_MATCH_TOTAL;
    int[gv_const_maxdisc + 1] lv_sKILL_RATE;
    int[gv_const_maxdisc + 1] lv_aCTION_RATE;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_const_dummyplayer;
text[gv_const_maxdisc + 1] gv_const_playername;
int gv_const_gametype;
int gv_round_limit;
int gv_round_count;
bool[gv_const_maxdisc + 1] gv_player_active;
bool[gv_const_maxdisc + 1] gv_player_is_human;
playergroup gv_humanplayers;
unitgroup[3] gv_team_agent;
playergroup gv_active_player_group_blue;
playergroup gv_active_player_group_red;
int gv_host;
int gv_btn_ffa_minus;
int gv_btn_ffa_plus;
int gv_btn_ffa_num;
int gv_btn_ffa_railgun;
int gv_btn_space;
int gv_btn_forest;
int gv_btn_lava;
bool gv_spawn_protect;
region gv_spawn;
int[gv_const_maxdisc + 1] gv_cameraangle;
int gv_environment;
point[gv_var_forest_array + 1] gv_coverage_location;
region[gv_var_forest_array + 1] gv_coverage_pool_area;
actor[gv_var_forest_array + 1] gv_coverage_pool_actor;
unitgroup[gv_var_forest_array + 1] gv_coverage_group_array;
int[gv_var_forest_array + 1] gv_forest_pool_type;
timer gv_sUDDEN_TIMER;
bool gv_suddendeath_halt;
actor[gv_const_maxdisc + 1] gv_sNIPER_FIREFX;
bool gv_railgun_allowed;
timer gv_railgun_timer;
bool[gv_const_maxdisc + 1] gv_railgun_zoom_active;
bool gv_railgun_charged;
revealer[gv_const_maxdisc + 1] gv_railgun_revealer;
unit[gv_const_maxdisc + 1] gv_sNIPER;
int[gv_const_maxdisc + 1] gv_sNIPER_TAG;
int[gv_const_maxdisc + 1] gv_shots_total;
int[gv_const_maxdisc + 1] gv_shots_hit;
int[gv_const_maxdisc + 1] gv_playtime;
camerainfo[gv_const_maxdisc + 1] gv_cAMERA;
int gv_survivor;
timer[gv_const_maxdisc + 1] gv_actionrate_timer;
int gv_bOARD;
int[gv_const_maxdisc + 1] gv_bOARD_WINS;
bool[gv_const_maxdisc + 1] gv_spectator_enabled;
int[gv_const_maxdisc + 1] gv_spectator_follow_target;
bool[gv_const_maxdisc + 1] gv_aI_active;
bool[gv_const_maxdisc + 1] gv_aI_donot_move;
bool gv_aI_halt;
bank[gv_const_maxdisc + 1] gv_bANK;
gs_disc gv_disc;
bank[gv_const_maxdisc + 1] gv_disc_array;

void InitGlobals () {
    int init_i;
    int init_i1;

    gv_const_dummyplayer = 15;
    gv_round_limit = 3;
    gv_humanplayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_team_agent[init_i] = UnitGroupEmpty();
    }
    gv_active_player_group_blue = PlayerGroupEmpty();
    gv_active_player_group_red = PlayerGroupEmpty();
    gv_host = 1;
    gv_btn_ffa_minus = c_invalidDialogControlId;
    gv_btn_ffa_plus = c_invalidDialogControlId;
    gv_btn_ffa_num = c_invalidDialogControlId;
    gv_btn_ffa_railgun = c_invalidDialogControlId;
    gv_btn_space = c_invalidDialogControlId;
    gv_btn_forest = c_invalidDialogControlId;
    gv_btn_lava = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_var_forest_array; init_i += 1) {
        gv_coverage_location[init_i] = RegionGetCenter(RegionFromId(11));
    }
    for (init_i = 0; init_i <= gv_var_forest_array; init_i += 1) {
        gv_coverage_group_array[init_i] = UnitGroupEmpty();
    }
    gv_sUDDEN_TIMER = TimerCreate();
    gv_railgun_allowed = true;
    gv_railgun_timer = TimerCreate();
    for (init_i = 0; init_i <= gv_const_maxdisc; init_i += 1) {
        gv_sNIPER_TAG[init_i] = c_textTagNone;
    }
    for (init_i = 0; init_i <= gv_const_maxdisc; init_i += 1) {
        gv_actionrate_timer[init_i] = TimerCreate();
    }
    gv_bOARD = c_boardNone;
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_disc.lv_dummy_array[init_i1] = "";
    }
    for (init_i1 = 0; init_i1 <= gv_const_maxdisc; init_i1 += 1) {
        gv_disc.lv_sKILL_RATE[init_i1] = 200;
    }
    for (init_i1 = 0; init_i1 <= gv_const_maxdisc; init_i1 += 1) {
        gv_disc.lv_aCTION_RATE[init_i1] = 200;
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_setnametags ();
void gf_setally ();
void gf_parse_is_active ();
int gf_select_random_human ();
text gf_btntext_railgun (bool lp_on);
text gf_btntext_wincount ();
void gf_display_map_select_text ();
void gf_camera_shuffle ();
void gf_forestdeform (int lp_i);
void gf_forestrandom (int lp_i, point lp_location, int lp_type);
bool gf_is_path_open (point lp_current_location, point lp_unit_location, int lp_environment);
void gf_burnFX (unit lp_cASTER, unit lp_uNIT, bool lp_oN_FLAG);
void gf_input_disable ();
void gf_finish_round (int lp_result);
void gf_display_target_score_text ();
void gf_finish ();
void gf_playerexit (int lp_p);
void gf_update_skill_rates (int lp_p);
void gf_board_update ();
void gf_activate_spectator (int lp_player);
int gf_AI_getplayer (region lp_area);
void gf_AI_pulse (unit lp_target_unit, int lp_player);
void gf_AI_snipe (int lp_player, unit lp_target_unit);
void gf_AI_railgun (int lp_player, unit lp_target_unit);
fixed gf_AI_compute_snipe_target_variance (int lp_target_player);
void gf_AI_search_loop (int lp_p);
void gf_AI_attempt_move (int lp_player, point lp_destination, bool lp_queue);
void gf_AI_update_skill_rates ();
void gf_data_save (int lp_player);
void gf_discinit ();
void gf_gethandle (int lp_i);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_init;
trigger gt_init_menu;
trigger gt_init_btnswitch;
trigger gt_init_scorecap;
trigger gt_init_game;
trigger gt_track_count;
trigger gt_init_prestage;
trigger gt_spawn_protection;
trigger gt_reset;
trigger gt_pool_enter;
trigger gt_coverage;
trigger gt_volcanoloop;
trigger gt_suddendeath;
trigger gt_suddendeath_extend;
trigger gt_shotline_track;
trigger gt_force_nontarget_for_humans;
trigger gt_resist_track;
trigger gt_pulse_command;
trigger gt_pulse_burn;
trigger gt_pulse_burn_soundloop;
trigger gt_railgun_timer;
trigger gt_railgun_zoomout;
trigger gt_railgun_cancel;
trigger gt_railgun_line_damage;
trigger gt_railgun_force_nontarget;
trigger gt_death_track;
trigger gt_playerexit_track;
trigger gt_board_init;
trigger gt_deselect_track;
trigger gt_spectator_enter;
trigger gt_myskill;
trigger gt_AI_loop;
trigger gt_AI_resist;
trigger gt_AI_test;
trigger gt_data_verify;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_setnametags () {
    // Variable Declarations
    int lv_i;
    int lv_txt_line;

    // Automatic Variable Declarations
    const int auto3686DD5A_ae = gv_const_maxdisc;
    const int auto3686DD5A_ai = 1;
    string autoA3673A6E_val;
    int auto23DC0418_val;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto3686DD5A_ai >= 0 && lv_i <= auto3686DD5A_ae) || (auto3686DD5A_ai < 0 && lv_i >= auto3686DD5A_ae) ) ; lv_i += auto3686DD5A_ai ) {
        autoA3673A6E_val = GameAttributeGameValue("1");
        if (autoA3673A6E_val == "0001") {
            gv_const_playername[lv_i] = PlayerName(lv_i);
        }
        else if (autoA3673A6E_val == "0002") {
            if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), lv_i) == true)) {
                gv_const_playername[lv_i] = (StringExternal("Param/Value/FF519FF8") + PlayerName(lv_i) + StringExternal("Param/Value/9FE5311C"));
            }

            if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), lv_i) == true)) {
                gv_const_playername[lv_i] = (StringExternal("Param/Value/D99A6E67") + PlayerName(lv_i) + StringExternal("Param/Value/4AC918C4"));
            }

        }
        else {
        }
        PlayerSetState(lv_i, c_playerStateShowWorldTip, false);
        auto23DC0418_val = PlayerType(lv_i);
        if (auto23DC0418_val == c_playerTypeUser) {
            PlayerOptionOverride(lv_i, "selectuncontrolable", "0");
        }
        else {
        }
    }
}

void gf_setally () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    string autoE3ADF188_val;
    playergroup auto91221F24_g;
    int auto91221F24_var;
    playergroup auto43C79320_g;
    playergroup autoC53B1514_g;
    int autoC53B1514_var;
    playergroup auto07D1E211_g;

    // Variable Initialization

    // Implementation
    autoE3ADF188_val = GameAttributeGameValue("1");
    if (autoE3ADF188_val == "0002") {
        gv_const_gametype = 2;
        libNtve_gf_SetPlayerGroupAlliance(GameAttributePlayersForTeam(1), libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_AddPlayerGroupToPlayerGroup(GameAttributePlayersForTeam(1), gv_active_player_group_red);
        auto91221F24_g = GameAttributePlayersForTeam(1);
        auto91221F24_var = -1;
        while (true) {
            auto91221F24_var = PlayerGroupNextPlayer(auto91221F24_g, auto91221F24_var);
            if (auto91221F24_var < 0) { break; }
            BoardItemSetText(gv_bOARD, 6, (auto91221F24_var + 1), StringExternal("Param/Value/215FD1AD"));
            auto43C79320_g = GameAttributePlayersForTeam(2);
            lv_i = -1;
            while (true) {
                lv_i = PlayerGroupNextPlayer(auto43C79320_g, lv_i);
                if (lv_i < 0) { break; }
                libNtve_gf_SetAlliance(auto91221F24_var, lv_i, libNtve_ge_AllianceSetting_Enemy);
            }
        }
        libNtve_gf_SetPlayerGroupAlliance(GameAttributePlayersForTeam(2), libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_AddPlayerGroupToPlayerGroup(GameAttributePlayersForTeam(2), gv_active_player_group_blue);
        autoC53B1514_g = GameAttributePlayersForTeam(2);
        autoC53B1514_var = -1;
        while (true) {
            autoC53B1514_var = PlayerGroupNextPlayer(autoC53B1514_g, autoC53B1514_var);
            if (autoC53B1514_var < 0) { break; }
            BoardItemSetText(gv_bOARD, 6, (autoC53B1514_var + 1), StringExternal("Param/Value/CE2A7A5D"));
            auto07D1E211_g = GameAttributePlayersForTeam(1);
            lv_i = -1;
            while (true) {
                lv_i = PlayerGroupNextPlayer(auto07D1E211_g, lv_i);
                if (lv_i < 0) { break; }
                libNtve_gf_SetAlliance(autoC53B1514_var, lv_i, libNtve_ge_AllianceSetting_Enemy);
            }
        }
    }
    else if (autoE3ADF188_val == "0001") {
        gv_const_gametype = 1;
        libNtve_gf_SetPlayerGroupAlliance(PlayerGroupAll(), libNtve_ge_AllianceSetting_Enemy);
    }
    else {
    }
}

void gf_parse_is_active () {
    // Automatic Variable Declarations
    const int auto62726CF2_ae = gv_const_maxdisc;
    int auto62726CF2_var;

    // Implementation
    auto62726CF2_var = 1;
    for ( ; auto62726CF2_var <= auto62726CF2_ae; auto62726CF2_var += 1 ) {
        if ((PlayerType(auto62726CF2_var) == c_playerTypeUser)) {
            gv_player_active[auto62726CF2_var] = true;
        }

        if ((PlayerType(auto62726CF2_var) == c_playerTypeComputer)) {
            gv_player_active[auto62726CF2_var] = true;
            gv_aI_active[auto62726CF2_var] = true;
        }

    }
}

int gf_select_random_human () {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        lv_p = RandomInt(1, gv_const_maxdisc);
        if ((PlayerStatus(lv_p) == c_playerStatusActive) && (PlayerType(lv_p) == c_playerTypeUser)) {
            break;
        }

    }
    return lv_p;
}

text gf_btntext_railgun (bool lp_on) {
    // Variable Declarations
    text lv_txt;

    // Automatic Variable Declarations
    bool auto58314F43_val;

    // Variable Initialization

    // Implementation
    auto58314F43_val = lp_on;
    if (auto58314F43_val == false) {
        lv_txt = StringExternal("Param/Value/15FC2CCA");
    }
    else if (auto58314F43_val == true) {
        lv_txt = StringExternal("Param/Value/668086AC");
    }
    else {
    }
    return lv_txt;
}

text gf_btntext_wincount () {
    // Variable Declarations
    text lv_txt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_txt = (StringExternal("Param/Value/49B91AC3") + IntToText(gv_round_limit) + StringExternal("Param/Value/271D4D0D"));
    return lv_txt;
}

void gf_display_map_select_text () {
    // Automatic Variable Declarations
    int auto5342703A_val;

    // Implementation
    auto5342703A_val = gv_const_gametype;
    if (auto5342703A_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/A0B687CD") + PlayerName(gv_host) + StringExternal("Param/Value/A481D28E")));
    }
    else if (auto5342703A_val == 2) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/675B5AED") + PlayerName(gv_host) + StringExternal("Param/Value/6DBB4CCC")));
    }
    else {
    }
}

void gf_camera_shuffle () {
    // Automatic Variable Declarations
    const int autoE272F3A5_ae = gv_const_maxdisc;
    int autoE272F3A5_var;

    // Implementation
    autoE272F3A5_var = 1;
    for ( ; autoE272F3A5_var <= autoE272F3A5_ae; autoE272F3A5_var += 1 ) {
        CameraUseHeightSmoothing(autoE272F3A5_var, false);
        gv_cameraangle[autoE272F3A5_var] = (RandomInt(0, 3) * 45);
        CameraSetValue(autoE272F3A5_var, c_cameraValueYaw, gv_cameraangle[autoE272F3A5_var], 0.0, -1, 0.0);
    }
}

void gf_forestdeform (int lp_i) {
    // Automatic Variable Declarations
    int auto971A0822_val;

    // Implementation
    auto971A0822_val = gv_forest_pool_type[lp_i];
    if (auto971A0822_val == 1) {
        libNtve_gf_CreateActorAtPoint("ForestMold8", gv_coverage_location[lp_i]);
        gv_coverage_pool_actor[lp_i] = libNtve_gf_ActorLastCreated();
    }
    else if (auto971A0822_val == 3) {
        libNtve_gf_CreateActorAtPoint("ForestMold4", gv_coverage_location[lp_i]);
        gv_coverage_pool_actor[lp_i] = libNtve_gf_ActorLastCreated();
    }
    else {
    }
}

void gf_forestrandom (int lp_i, point lp_location, int lp_type) {
    // Variable Declarations
    point lv_location_temp;
    bool lv_flag;
    fixed lv_r;

    // Automatic Variable Declarations
    int auto415E11EF_val;
    const int autoC10E18B0_n = 24;
    int autoC10E18B0_i;
    const int auto034EA7F3_n = 16;
    int auto034EA7F3_i;
    const int auto2F88E47B_n = 8;
    int auto2F88E47B_i;
    const int autoFD06E44C_n = 10;
    int autoFD06E44C_i;
    const int auto1DABBBD5_n = 4;
    int auto1DABBBD5_i;
    const int autoC7E7835E_n = 10;
    int autoC7E7835E_i;

    // Variable Initialization

    // Implementation
    auto415E11EF_val = lp_type;
    if (auto415E11EF_val == 1) {
        gv_coverage_pool_area[lp_i] = RegionCircle(lp_location, 6.0);
        PlayerCreateEffectPoint(gv_const_dummyplayer, "PulseZapRepeat", lp_location);
        UnitCreate(1, "Beacon_Protoss", c_unitCreateIgnorePlacement, gv_const_dummyplayer, lp_location, libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_coverage_group_array[lp_i], UnitLastCreated());
        for (autoC10E18B0_i = 1; autoC10E18B0_i <= autoC10E18B0_n; autoC10E18B0_i += 1) {
            lv_location_temp = PointWithOffsetPolar(lp_location, RandomFixed(6.0, 8.0), libNtve_gf_RandomAngle());
            if ((RegionContainsPoint(RegionEntireMap(), lv_location_temp) == true)) {
                UnitCreate(1, "SpiderMineBurrowed", c_unitCreateIgnorePlacement, gv_const_dummyplayer, lv_location_temp, libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_coverage_group_array[lp_i], UnitLastCreated());
                libNtve_gf_AttachActorToUnit(UnitLastCreated(), "HavenFoliage", "Ref_Origin");
            }

        }
    }
    else if (auto415E11EF_val == 2) {
        gv_coverage_pool_area[lp_i] = null;
        for (auto034EA7F3_i = 1; auto034EA7F3_i <= auto034EA7F3_n; auto034EA7F3_i += 1) {
            lv_location_temp = PointWithOffsetPolar(lp_location, RandomFixed(0.0, 2.0), libNtve_gf_RandomAngle());
            if ((RegionContainsPoint(RegionEntireMap(), lv_location_temp) == true)) {
                UnitCreate(1, "SpiderMineBurrowed", c_unitCreateIgnorePlacement, gv_const_dummyplayer, lv_location_temp, libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_coverage_group_array[lp_i], UnitLastCreated());
                libNtve_gf_AttachActorToUnit(UnitLastCreated(), "HavenTree", "Ref_Origin");
            }

        }
        for (auto2F88E47B_i = 1; auto2F88E47B_i <= auto2F88E47B_n; auto2F88E47B_i += 1) {
            lv_location_temp = PointWithOffsetPolar(lp_location, RandomFixed(4.0, 8.0), libNtve_gf_RandomAngle());
            if ((RegionContainsPoint(RegionEntireMap(), lv_location_temp) == true)) {
                UnitCreate(1, "DestructibleRock4x4", c_unitCreateIgnorePlacement, gv_const_dummyplayer, lv_location_temp, libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_coverage_group_array[lp_i], UnitLastCreated());
            }

        }
    }
    else if (auto415E11EF_val == 3) {
        gv_coverage_pool_area[lp_i] = RegionCircle(lp_location, 4.0);
        PlayerCreateEffectPoint(gv_const_dummyplayer, "PulseZapRepeatSmall", lp_location);
        lv_r = libNtve_gf_RandomAngle();
        for (autoFD06E44C_i = 1; autoFD06E44C_i <= autoFD06E44C_n; autoFD06E44C_i += 1) {
            lv_r += 5.0;
            lv_location_temp = PointWithOffsetPolar(lp_location, RandomFixed(6.0, 8.0), lv_r);
            if ((RegionContainsPoint(RegionEntireMap(), lv_location_temp) == true)) {
                UnitCreate(1, "SpiderMineBurrowed", c_unitCreateIgnorePlacement, gv_const_dummyplayer, lv_location_temp, libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_coverage_group_array[lp_i], UnitLastCreated());
                libNtve_gf_AttachActorToUnit(UnitLastCreated(), "HavenFoliage", "Ref_Origin");
            }

        }
        for (auto1DABBBD5_i = 1; auto1DABBBD5_i <= auto1DABBBD5_n; auto1DABBBD5_i += 1) {
            lv_r += 25.0;
            lv_location_temp = PointWithOffsetPolar(lp_location, RandomFixed(4.0, 6.0), lv_r);
            if ((RegionContainsPoint(RegionEntireMap(), lv_location_temp) == true)) {
                UnitCreate(1, "DestructibleRock4x4", c_unitCreateIgnorePlacement, gv_const_dummyplayer, lv_location_temp, libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_coverage_group_array[lp_i], UnitLastCreated());
            }

        }
        for (autoC7E7835E_i = 1; autoC7E7835E_i <= autoC7E7835E_n; autoC7E7835E_i += 1) {
            lv_r += 5.0;
            lv_location_temp = PointWithOffsetPolar(lp_location, RandomFixed(6.0, 8.0), lv_r);
            if ((RegionContainsPoint(RegionEntireMap(), lv_location_temp) == true)) {
                UnitCreate(1, "SpiderMineBurrowed", c_unitCreateIgnorePlacement, gv_const_dummyplayer, lv_location_temp, libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_coverage_group_array[lp_i], UnitLastCreated());
                libNtve_gf_AttachActorToUnit(UnitLastCreated(), "HavenFoliage", "Ref_Origin");
            }

        }
    }
    else {
    }
}

bool gf_is_path_open (point lp_current_location, point lp_unit_location, int lp_environment) {
    // Automatic Variable Declarations
    int auto5B600B64_val;

    // Implementation
    auto5B600B64_val = lp_environment;
    if (auto5B600B64_val == 0) {
        if ((PathingType(lp_current_location) != c_pathingBuilding)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto5B600B64_val == 1) {
        if ((PointPathingPassable(lp_current_location) == true)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto5B600B64_val == 2) {
        if ((CliffLevel(lp_unit_location) >= CliffLevel(lp_current_location))) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto5B600B64_val == 3) {
        if ((PointPathingPassable(lp_current_location) == true)) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
    }
    return true;
}

trigger auto_gf_burnFX_Trigger = null;
unit auto_gf_burnFX_lp_cASTER;
unit auto_gf_burnFX_lp_uNIT;
bool auto_gf_burnFX_lp_oN_FLAG;

void gf_burnFX (unit lp_cASTER, unit lp_uNIT, bool lp_oN_FLAG) {
    auto_gf_burnFX_lp_cASTER = lp_cASTER;
    auto_gf_burnFX_lp_uNIT = lp_uNIT;
    auto_gf_burnFX_lp_oN_FLAG = lp_oN_FLAG;

    if (auto_gf_burnFX_Trigger == null) {
        auto_gf_burnFX_Trigger = TriggerCreate("auto_gf_burnFX_TriggerFunc");
    }

    TriggerExecute(auto_gf_burnFX_Trigger, false, false);
}

bool auto_gf_burnFX_TriggerFunc (bool testConds, bool runActions) {
    unit lp_cASTER = auto_gf_burnFX_lp_cASTER;
    unit lp_uNIT = auto_gf_burnFX_lp_uNIT;
    bool lp_oN_FLAG = auto_gf_burnFX_lp_oN_FLAG;

    // Automatic Variable Declarations
    bool autoFAE0A12E_val;

    // Implementation
    if (((UnitGetOwner(lp_uNIT) == 16) || (UnitGetOwner(lp_cASTER) == 16))) {
        return true;
    }

    autoFAE0A12E_val = lp_oN_FLAG;
    if (autoFAE0A12E_val == true) {
        while ((UnitHasBehavior(lp_uNIT, "PulseFlameDeBuff") == false)) {
            libNtve_gf_KillModel(gv_sNIPER_FIREFX[UnitGetOwner(lp_uNIT)]);
            SoundPlayOnUnit(SoundLink("THorner05SScientist00056", 0), PlayerGroupAll(), lp_uNIT, 0.0, 100.0, 0.0);
            libNtve_gf_AttachModelToUnit(lp_uNIT, "FireMedium", "Ref_Center");
            gv_sNIPER_FIREFX[UnitGetOwner(lp_uNIT)] = libNtve_gf_ActorLastCreated();
            UnitBehaviorAdd(lp_uNIT, "PulseFlameDeBuff", lp_cASTER, 1);
        }
    }
    else if (autoFAE0A12E_val == false) {
        while ((UnitHasBehavior(lp_uNIT, "PulseFlameDeBuff") == true)) {
            UnitBehaviorRemove(lp_uNIT, "PulseFlameDeBuff", 1);
            libNtve_gf_KillModel(gv_sNIPER_FIREFX[UnitGetOwner(lp_uNIT)]);
            SoundPlayOnUnit(SoundLink("Doodad_SteamBurstLarge", 0), PlayerGroupAll(), lp_uNIT, 0.0, 100.0, 0.0);
            libNtve_gf_AttachModelToUnit(lp_uNIT, "SmokePillarsTall", "Ref_Center");
            gv_sNIPER_FIREFX[UnitGetOwner(lp_uNIT)] = libNtve_gf_ActorLastCreated();
            Wait(2.0, c_timeGame);
            libNtve_gf_KillModel(gv_sNIPER_FIREFX[UnitGetOwner(lp_uNIT)]);
        }
    }
    else {
    }
    return true;
}

void gf_input_disable () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto8540075C_ae = gv_const_maxdisc;
    const int auto8540075C_ai = 1;

    // Variable Initialization

    // Implementation
    TriggerStop(gt_spectator_enter);
    TriggerStop(gt_AI_loop);
    TriggerStop(gt_death_track);
    gv_railgun_charged = false;
    gv_suddendeath_halt = true;
    gv_aI_halt = true;
    lv_i = 1;
    for ( ; ( (auto8540075C_ai >= 0 && lv_i <= auto8540075C_ae) || (auto8540075C_ai < 0 && lv_i >= auto8540075C_ae) ) ; lv_i += auto8540075C_ai ) {
        gv_railgun_zoom_active[lv_i] = false;
        gv_spectator_enabled[lv_i] = false;
    }
    TimerPause(gv_railgun_timer, true);
}

void gf_finish_round (int lp_result) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto95AF7313_val;
    int auto66AD8391_val;
    const int autoDBDA60BC_ae = gv_const_maxdisc;
    const int autoDBDA60BC_ai = 1;
    int autoF15D95E3_val;
    playergroup auto504D6BC2_g;
    playergroup auto16277E2A_g;

    // Variable Initialization

    // Implementation
    gf_input_disable();
    auto95AF7313_val = gv_const_gametype;
    if (auto95AF7313_val == 1) {
        auto66AD8391_val = lp_result;
        if (auto66AD8391_val == 0) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/24B0B4AC")));
            Wait(1.0, c_timeGame);
            gf_board_update();
            Wait(4.0, c_timeGame);
            gf_display_target_score_text();
            Wait(5.0, c_timeGame);
            TriggerExecute(gt_reset, true, false);
        }
        else if (auto66AD8391_val == 1) {
            gv_survivor = UnitGetOwner(UnitGroupUnit(UnitGroup("Ghost", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
            libNtve_gf_MakeUnitInvulnerable(gv_sNIPER[gv_survivor], true);
            UnitSetPropertyFixed(gv_sNIPER[gv_survivor], c_unitPropEnergyMax, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/F0A88DF9") + PlayerName(gv_survivor) + StringExternal("Param/Value/FD056EDC")));
            Wait(1.0, c_timeGame);
            gv_bOARD_WINS[gv_survivor] += 1;
            lv_i = 1;
            for ( ; ( (autoDBDA60BC_ai >= 0 && lv_i <= autoDBDA60BC_ae) || (autoDBDA60BC_ai < 0 && lv_i >= autoDBDA60BC_ae) ) ; lv_i += autoDBDA60BC_ai ) {
                if ((gv_player_is_human[lv_i] == false)) {
                    continue;
                }

                gv_disc.lv_bANK_MATCH_TOTAL[lv_i] += 1;
                gf_data_save(lv_i);
            }
            gf_board_update();
            Wait(4.0, c_timeGame);
            if ((gv_bOARD_WINS[gv_survivor] < gv_round_limit)) {
                gf_display_target_score_text();
                Wait(5.0, c_timeGame);
                TriggerExecute(gt_reset, true, false);
            }
            else {
                gf_finish();
            }
        }
        else {
        }
    }
    else if (auto95AF7313_val == 2) {
        autoF15D95E3_val = lp_result;
        if (autoF15D95E3_val == 0) {
            gv_survivor = 0;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/6D4DACE6")));
        }
        else if (autoF15D95E3_val == 1) {
            gv_survivor = 1;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/B78D0629")));
            auto504D6BC2_g = gv_active_player_group_red;
            lv_i = -1;
            while (true) {
                lv_i = PlayerGroupNextPlayer(auto504D6BC2_g, lv_i);
                if (lv_i < 0) { break; }
                libNtve_gf_MakeUnitInvulnerable(gv_sNIPER[lv_i], true);
                UnitSetPropertyFixed(gv_sNIPER[lv_i], c_unitPropEnergyMax, 0.0);
                gv_bOARD_WINS[lv_i] += 1;
            }
        }
        else if (autoF15D95E3_val == 2) {
            gv_survivor = 2;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/805A86AA")));
            auto16277E2A_g = gv_active_player_group_blue;
            lv_i = -1;
            while (true) {
                lv_i = PlayerGroupNextPlayer(auto16277E2A_g, lv_i);
                if (lv_i < 0) { break; }
                libNtve_gf_MakeUnitInvulnerable(gv_sNIPER[lv_i], true);
                UnitSetPropertyFixed(gv_sNIPER[lv_i], c_unitPropEnergyMax, 0.0);
                gv_bOARD_WINS[lv_i] += 1;
            }
        }
        else {
        }
        Wait(1.0, c_timeGame);
        gf_board_update();
        Wait(4.0, c_timeGame);
        if ((gv_bOARD_WINS[PlayerGroupPlayer(gv_active_player_group_red, 1)] < gv_round_limit) && (gv_bOARD_WINS[PlayerGroupPlayer(gv_active_player_group_blue, 1)] < gv_round_limit)) {
            gf_display_target_score_text();
            Wait(5.0, c_timeGame);
            TriggerExecute(gt_reset, true, false);
        }
        else {
            gf_finish();
        }
    }
    else {
    }
}

void gf_display_target_score_text () {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/40C6FB21") + IntToText(gv_round_limit) + StringExternal("Param/Value/D612CF94")));
}

void gf_finish () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoE775F039_val;
    int auto58D65A87_val;
    const int autoC638C30C_ae = gv_const_maxdisc;
    const int autoC638C30C_ai = 1;
    int autoFF8692BB_val;

    // Variable Initialization

    // Implementation
    SoundPlay(SoundLink("UI_BnetGameFound", -1), PlayerGroupAll(), 100.0, 0.0);
    autoE775F039_val = gv_const_gametype;
    if (autoE775F039_val == 1) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/82352365") + PlayerName(gv_survivor) + StringExternal("Param/Value/1DB86D59") + IntToText(gv_round_limit) + StringExternal("Param/Value/0C4A1CAA")));
    }
    else if (autoE775F039_val == 2) {
        auto58D65A87_val = gv_survivor;
        if (auto58D65A87_val == 1) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/5A50E22C") + IntToText(gv_round_limit) + StringExternal("Param/Value/3CF24334")));
        }
        else if (auto58D65A87_val == 2) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/A6F44A65") + IntToText(gv_round_limit) + StringExternal("Param/Value/62859487")));
        }
        else {
        }
    }
    else {
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/63266638"));
    TriggerEnable(gt_playerexit_track, false);
    Wait(10.0, c_timeReal);
    lv_i = 1;
    for ( ; ( (autoC638C30C_ai >= 0 && lv_i <= autoC638C30C_ae) || (autoC638C30C_ai < 0 && lv_i >= autoC638C30C_ae) ) ; lv_i += autoC638C30C_ai ) {
        autoFF8692BB_val = gv_const_gametype;
        if (autoFF8692BB_val == 1) {
            if ((lv_i == gv_survivor)) {
                GameOver(lv_i, c_gameOverVictory, false, false);
            }
            else {
                GameOver(lv_i, c_gameOverDefeat, false, false);
            }
        }
        else if (autoFF8692BB_val == 2) {
            if ((gv_bOARD_WINS[lv_i] == gv_round_limit)) {
                GameOver(lv_i, c_gameOverVictory, false, false);
            }
            else {
                GameOver(lv_i, c_gameOverDefeat, false, false);
            }
        }
        else {
        }
    }
}

void gf_playerexit (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    gv_player_active[lp_p] = false;
    gv_player_is_human[lp_p] = false;
    PlayerGroupRemove(gv_active_player_group_red, lp_p);
    PlayerGroupRemove(gv_active_player_group_blue, lp_p);
}

void gf_update_skill_rates (int lp_p) {
    // Variable Declarations
    int lv_new_skill_rate;
    int lv_new_action_rate;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_new_skill_rate = (((gv_shots_hit[lp_p] * 999) + 1) / (gv_shots_total[lp_p] + 1));
    lv_new_action_rate = (((gv_shots_total[lp_p] * 999) + 1) / (gv_playtime[lp_p] + 1));
    gv_disc.lv_sKILL_RATE[lp_p] = ((gv_disc.lv_sKILL_RATE[lp_p] + lv_new_skill_rate) / 2);
    gv_disc.lv_aCTION_RATE[lp_p] = ((gv_disc.lv_aCTION_RATE[lp_p] + lv_new_action_rate) / 2);
}

trigger auto_gf_board_update_Trigger = null;

void gf_board_update () {
    if (auto_gf_board_update_Trigger == null) {
        auto_gf_board_update_Trigger = TriggerCreate("auto_gf_board_update_TriggerFunc");
    }

    TriggerExecute(auto_gf_board_update_Trigger, false, false);
}

bool auto_gf_board_update_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoF519EA92_ae = gv_const_maxdisc;
    const int autoF519EA92_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (autoF519EA92_ai >= 0 && lv_i <= autoF519EA92_ae) || (autoF519EA92_ai < 0 && lv_i >= autoF519EA92_ae) ) ; lv_i += autoF519EA92_ai ) {
        if ((gv_player_active[lv_i] == false)) {
            continue;
        }

        BoardItemSetText(gv_bOARD, 1, (lv_i + 1), (StringExternal("Param/Value/94327A55") + IntToText(gv_bOARD_WINS[lv_i])));
        BoardItemSetText(gv_bOARD, 2, (lv_i + 1), (StringExternal("Param/Value/E5515842") + gv_const_playername[lv_i]));
        BoardItemSetText(gv_bOARD, 3, (lv_i + 1), IntToText(gv_bOARD_WINS[lv_i]));
    }
    BoardSort(gv_bOARD, 3, false, 1);
    return true;
}

trigger auto_gf_activate_spectator_Trigger = null;
int auto_gf_activate_spectator_lp_player;

void gf_activate_spectator (int lp_player) {
    auto_gf_activate_spectator_lp_player = lp_player;

    if (auto_gf_activate_spectator_Trigger == null) {
        auto_gf_activate_spectator_Trigger = TriggerCreate("auto_gf_activate_spectator_TriggerFunc");
    }

    TriggerExecute(auto_gf_activate_spectator_Trigger, false, false);
}

bool auto_gf_activate_spectator_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_activate_spectator_lp_player;

    // Automatic Variable Declarations
    int autoBD4E2422_val;

    // Implementation
    autoBD4E2422_val = gv_const_gametype;
    if (autoBD4E2422_val == 1) {
        VisRevealerCreate(lp_player, gv_spawn);
        gv_railgun_revealer[lp_player] = VisRevealerLastCreated();
        gv_spectator_follow_target[lp_player] = UnitGetOwner(UnitGroupRandomUnit(UnitGroup("Ghost", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
    }
    else if (autoBD4E2422_val == 2) {
        if ((PlayerGroupHasPlayer(gv_active_player_group_red, lp_player) == true)) {
            gv_spectator_follow_target[lp_player] = UnitGetOwner(UnitGroupRandomUnit(gv_team_agent[1], c_unitCountAlive));
        }

        if ((PlayerGroupHasPlayer(gv_active_player_group_blue, lp_player) == true)) {
            gv_spectator_follow_target[lp_player] = UnitGetOwner(UnitGroupRandomUnit(gv_team_agent[2], c_unitCountAlive));
        }

    }
    else {
    }
    Wait(0.6, c_timeGame);
    CameraPan(lp_player, UnitGetPosition(gv_sNIPER[gv_spectator_follow_target[lp_player]]), 0.0, -1, 50, false);
    CameraFollowUnitGroup(lp_player, libNtve_gf_ConvertUnitToUnitGroup(gv_sNIPER[gv_spectator_follow_target[lp_player]]), true, false);
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaChat, (StringExternal("Param/Value/FB641794")));
    gv_spectator_enabled[lp_player] = true;
    return true;
}

int gf_AI_getplayer (region lp_area) {
    // Variable Declarations
    int lv_getplayer;

    // Automatic Variable Declarations
    int autoE5B9BE3C_val;

    // Variable Initialization

    // Implementation
    lv_getplayer = UnitGetOwner(RegionGetAttachUnit(lp_area));
    autoE5B9BE3C_val = lv_getplayer;
    if (autoE5B9BE3C_val == 16) {
        return gv_const_dummyplayer;
    }
    else {
        return lv_getplayer;
    }
}

trigger auto_gf_AI_pulse_Trigger = null;
unit auto_gf_AI_pulse_lp_target_unit;
int auto_gf_AI_pulse_lp_player;

void gf_AI_pulse (unit lp_target_unit, int lp_player) {
    auto_gf_AI_pulse_lp_target_unit = lp_target_unit;
    auto_gf_AI_pulse_lp_player = lp_player;

    if (auto_gf_AI_pulse_Trigger == null) {
        auto_gf_AI_pulse_Trigger = TriggerCreate("auto_gf_AI_pulse_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_pulse_Trigger, false, false);
}

bool auto_gf_AI_pulse_TriggerFunc (bool testConds, bool runActions) {
    unit lp_target_unit = auto_gf_AI_pulse_lp_target_unit;
    int lp_player = auto_gf_AI_pulse_lp_player;

    // Automatic Variable Declarations
    string autoC8ADD325_val;

    // Implementation
    autoC8ADD325_val = UnitGetType(lp_target_unit);
    if (autoC8ADD325_val == "Beacon_Protoss") {
        if ((UnitHasBehavior(gv_sNIPER[lp_player], "DiveDebuff") == true)) {
            if ((RandomInt(1, 1000) <= gv_disc.lv_aCTION_RATE[lp_player])) {
                gf_AI_attempt_move(lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_sNIPER[lp_player]), -4.0, UnitGetPosition(lp_target_unit)), false);
            }

        }
        else {
            if ((RandomInt(1, 1000) <= gv_disc.lv_sKILL_RATE[lp_player])) {
                UnitIssueOrder(gv_sNIPER[lp_player], OrderTargetingPoint(AbilityCommand("EMP", 0), UnitGetPosition(lp_target_unit)), c_orderQueueReplace);
                gf_AI_attempt_move(lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_sNIPER[lp_player]), -4.0, UnitGetPosition(lp_target_unit)), true);
            }

        }
    }
    else if (autoC8ADD325_val == "SpiderMineBurrowed") {
        if ((libNtve_gf_UnitIsPaused(lp_target_unit) == false) && (RandomInt(1, 1000) <= gv_disc.lv_sKILL_RATE[lp_player])) {
            UnitIssueOrder(gv_sNIPER[lp_player], OrderTargetingPoint(AbilityCommand("EMP", 0), UnitGetPosition(lp_target_unit)), c_orderQueueReplace);
            gf_AI_attempt_move(lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(gv_sNIPER[lp_player]), -4.0, UnitGetPosition(lp_target_unit)), true);
        }

    }
    else {
    }
    return true;
}

trigger auto_gf_AI_snipe_Trigger = null;
int auto_gf_AI_snipe_lp_player;
unit auto_gf_AI_snipe_lp_target_unit;

void gf_AI_snipe (int lp_player, unit lp_target_unit) {
    auto_gf_AI_snipe_lp_player = lp_player;
    auto_gf_AI_snipe_lp_target_unit = lp_target_unit;

    if (auto_gf_AI_snipe_Trigger == null) {
        auto_gf_AI_snipe_Trigger = TriggerCreate("auto_gf_AI_snipe_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_snipe_Trigger, false, false);
}

bool auto_gf_AI_snipe_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_AI_snipe_lp_player;
    unit lp_target_unit = auto_gf_AI_snipe_lp_target_unit;

    // Variable Declarations
    int lv_target_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target_player = UnitGetOwner(lp_target_unit);

    // Implementation
    if ((libNtve_gf_UnitIsVisibleToPlayer(lp_target_unit, lp_player) == true)) {
        if ((RandomInt(1, 1000) <= gv_disc.lv_aCTION_RATE[lv_target_player])) {
            if ((RandomInt(1, 1000) <= gv_disc.lv_sKILL_RATE[lv_target_player])) {
                UnitIssueOrder(gv_sNIPER[lp_player], OrderTargetingUnit(AbilityCommand("Snipe", 0), lp_target_unit), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_sNIPER[lp_player], OrderTargetingPoint(AbilityCommand("Snipe", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_target_unit), gf_AI_compute_snipe_target_variance(lv_target_player)))), c_orderQueueReplace);
            }
            gf_AI_attempt_move(lp_player, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_sNIPER[lp_player]), 10.0)), true);
        }
        else {
            gf_AI_attempt_move(lp_player, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_sNIPER[lp_player]), 10.0)), true);
        }
    }

    return true;
}

trigger auto_gf_AI_railgun_Trigger = null;
int auto_gf_AI_railgun_lp_player;
unit auto_gf_AI_railgun_lp_target_unit;

void gf_AI_railgun (int lp_player, unit lp_target_unit) {
    auto_gf_AI_railgun_lp_player = lp_player;
    auto_gf_AI_railgun_lp_target_unit = lp_target_unit;

    if (auto_gf_AI_railgun_Trigger == null) {
        auto_gf_AI_railgun_Trigger = TriggerCreate("auto_gf_AI_railgun_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_railgun_Trigger, false, false);
}

bool auto_gf_AI_railgun_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_AI_railgun_lp_player;
    unit lp_target_unit = auto_gf_AI_railgun_lp_target_unit;

    // Variable Declarations
    int lv_target_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target_player = UnitGetOwner(lp_target_unit);

    // Implementation
    if ((RandomInt(1, 1000) <= gv_disc.lv_aCTION_RATE[lv_target_player])) {
        gv_aI_donot_move[lp_player] = true;
        UnitIssueOrder(gv_sNIPER[lp_player], OrderTargetingPoint(AbilityCommand("NovaSnipe", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_target_unit), gf_AI_compute_snipe_target_variance(lv_target_player)))), c_orderQueueReplace);
        Wait(RandomFixed(4.0, 5.0), c_timeGame);
        gv_aI_donot_move[lp_player] = false;
    }

    return true;
}

fixed gf_AI_compute_snipe_target_variance (int lp_target_player) {
    // Variable Declarations
    fixed lv_v;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_v = ((1000.0 / IntToFixed(gv_disc.lv_sKILL_RATE[lp_target_player])) * 0.25);
    return lv_v;
}

trigger auto_gf_AI_search_loop_Trigger = null;
int auto_gf_AI_search_loop_lp_p;

void gf_AI_search_loop (int lp_p) {
    auto_gf_AI_search_loop_lp_p = lp_p;

    if (auto_gf_AI_search_loop_Trigger == null) {
        auto_gf_AI_search_loop_Trigger = TriggerCreate("auto_gf_AI_search_loop_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_search_loop_Trigger, false, false);
}

bool auto_gf_AI_search_loop_TriggerFunc (bool testConds, bool runActions) {
    int lp_p = auto_gf_AI_search_loop_lp_p;

    // Variable Declarations
    unit lv_target;
    int lv_action_idx;

    // Automatic Variable Declarations
    int autoC6879BA7_val;

    // Variable Initialization

    // Implementation
    while ((gv_aI_halt == false)) {
        Wait(1.0, c_timeGame);
        if ((UnitIsAlive(gv_sNIPER[lp_p]) == false)) {
            break;
        }

        lv_action_idx = RandomInt(1, 3);
        autoC6879BA7_val = lv_action_idx;
        if (autoC6879BA7_val == 1) {
            lv_target = UnitGroupRandomUnit(UnitGroupSearch("Ghost", lp_p, UnitGetPosition(gv_sNIPER[lp_p]), 10.0, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
            if ((UnitIsValid(lv_target) == false)) {
                continue;
            }

            gf_AI_snipe(lp_p, lv_target);
        }
        else if (autoC6879BA7_val == 2) {
            lv_target = UnitGroupRandomUnit(UnitGroupSearch(null, lp_p, UnitGetPosition(gv_sNIPER[lp_p]), 10.0, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
            if ((UnitIsValid(lv_target) == false)) {
                continue;
            }

            gf_AI_pulse(lv_target, lp_p);
        }
        else if (autoC6879BA7_val == 3) {
            if ((gv_railgun_charged == false)) {
                continue;
            }

            lv_target = UnitGroupRandomUnit(UnitGroupSearch("Ghost", lp_p, UnitGetPosition(gv_sNIPER[lp_p]), 100.0, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
            if ((UnitIsValid(lv_target) == false)) {
                continue;
            }

            if ((DistanceBetweenPoints(UnitGetPosition(gv_sNIPER[lp_p]), UnitGetPosition(lv_target)) <= 10.0)) {
                continue;
            }

            gf_AI_railgun(lp_p, lv_target);
        }
        else {
        }
    }
    return true;
}

trigger auto_gf_AI_attempt_move_Trigger = null;
int auto_gf_AI_attempt_move_lp_player;
point auto_gf_AI_attempt_move_lp_destination;
bool auto_gf_AI_attempt_move_lp_queue;

void gf_AI_attempt_move (int lp_player, point lp_destination, bool lp_queue) {
    auto_gf_AI_attempt_move_lp_player = lp_player;
    auto_gf_AI_attempt_move_lp_destination = lp_destination;
    auto_gf_AI_attempt_move_lp_queue = lp_queue;

    if (auto_gf_AI_attempt_move_Trigger == null) {
        auto_gf_AI_attempt_move_Trigger = TriggerCreate("auto_gf_AI_attempt_move_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_attempt_move_Trigger, false, false);
}

bool auto_gf_AI_attempt_move_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_AI_attempt_move_lp_player;
    point lp_destination = auto_gf_AI_attempt_move_lp_destination;
    bool lp_queue = auto_gf_AI_attempt_move_lp_queue;

    // Automatic Variable Declarations
    bool auto53629F6F_val;

    // Implementation
    Wait(RandomFixed(0.0, 0.25), c_timeGame);
    if ((gv_aI_donot_move[lp_player] == false)) {
        auto53629F6F_val = lp_queue;
        if (auto53629F6F_val == false) {
            UnitIssueOrder(gv_sNIPER[lp_player], OrderTargetingPoint(AbilityCommand("move", 0), lp_destination), c_orderQueueReplace);
        }
        else if (auto53629F6F_val == true) {
            UnitIssueOrder(gv_sNIPER[lp_player], OrderTargetingPoint(AbilityCommand("move", 0), lp_destination), c_orderQueueAddToEnd);
        }
        else {
        }
    }

    return true;
}

trigger auto_gf_AI_update_skill_rates_Trigger = null;

void gf_AI_update_skill_rates () {
    if (auto_gf_AI_update_skill_rates_Trigger == null) {
        auto_gf_AI_update_skill_rates_Trigger = TriggerCreate("auto_gf_AI_update_skill_rates_TriggerFunc");
    }

    TriggerExecute(auto_gf_AI_update_skill_rates_Trigger, false, false);
}

bool auto_gf_AI_update_skill_rates_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_skillrate_sum;
    int lv_actionrate_sum;
    int lv_player_count;

    // Automatic Variable Declarations
    const int auto7C0896B3_ae = gv_const_maxdisc;
    int auto7C0896B3_var;
    const int autoBB5F70C3_ae = gv_const_maxdisc;
    int autoBB5F70C3_var;

    // Variable Initialization

    // Implementation
    auto7C0896B3_var = 1;
    for ( ; auto7C0896B3_var <= auto7C0896B3_ae; auto7C0896B3_var += 1 ) {
        if ((gv_player_is_human[auto7C0896B3_var] == true)) {
            lv_skillrate_sum += gv_disc.lv_sKILL_RATE[auto7C0896B3_var];
            lv_actionrate_sum += gv_disc.lv_aCTION_RATE[auto7C0896B3_var];
            lv_player_count += 1;
        }

    }
    autoBB5F70C3_var = 1;
    for ( ; autoBB5F70C3_var <= autoBB5F70C3_ae; autoBB5F70C3_var += 1 ) {
        if ((gv_aI_active[autoBB5F70C3_var] == true) && (lv_player_count > 0)) {
            gv_disc.lv_sKILL_RATE[autoBB5F70C3_var] = (lv_skillrate_sum / lv_player_count);
            gv_disc.lv_aCTION_RATE[autoBB5F70C3_var] = (lv_actionrate_sum / lv_player_count);
        }

    }
    return true;
}

void gf_data_save (int lp_player) {
    // Variable Declarations
    string lv_string_temp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string_temp = "";

    // Implementation
    lv_string_temp = (lv_string_temp + IntToString(gv_disc.lv_bANK_MATCH_TOTAL[lp_player]));
    lv_string_temp = (lv_string_temp + gv_disc.lv_dummy_array[RandomInt(1, 6)]);
    lv_string_temp = (lv_string_temp + IntToString(gv_disc.lv_sKILL_RATE[lp_player]));
    lv_string_temp = (lv_string_temp + gv_disc.lv_dummy_array[RandomInt(1, 6)]);
    lv_string_temp = (lv_string_temp + IntToString(gv_disc.lv_aCTION_RATE[lp_player]));
    while ((StringLength(lv_string_temp) < 28)) {
        lv_string_temp = (lv_string_temp + gv_disc.lv_dummy_array[RandomInt(1, 6)]);
    }
    lv_string_temp = lib1_gf_StarcodeEncryptString(lv_string_temp, IntToString(gv_disc.lv_playerhandle[lp_player]));
    lv_string_temp = lib1_gf_StarcodeHashString(lv_string_temp, 4);
    BankValueSetFromString(gv_disc_array[lp_player], "DATA", "S", lv_string_temp);
    BankSave(gv_disc_array[lp_player]);
}

void gf_discinit () {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_StarcodeSetEncryptionAlphabet("0123456789ABCDEF");
    gv_disc.lv_dummy_array[1] = "A";
    gv_disc.lv_dummy_array[2] = "B";
    gv_disc.lv_dummy_array[3] = "C";
    gv_disc.lv_dummy_array[4] = "D";
    gv_disc.lv_dummy_array[5] = "E";
    gv_disc.lv_dummy_array[6] = "F";
}

void gf_gethandle (int lp_i) {
    // Variable Declarations
    string lv_tmp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tmp = "";

    // Implementation
    if ((GameIsTestMap(false) == true)) {
        gv_disc.lv_playerhandle[lp_i] = 1;
    }
    else {
        lv_tmp = PlayerHandle(lp_i);
        lv_tmp = StringReplaceWord(lv_tmp, "-", " ", c_stringReplaceAll, c_stringCase);
        lv_tmp = StringWord(lv_tmp, 4);
        gv_disc.lv_playerhandle[lp_i] = StringToInt(lv_tmp);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: init
//--------------------------------------------------------------------------------------------------
bool gt_init_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_txt_line;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_EndCreditsD", c_soundtrackCueAny, c_soundtrackIndexAny);
    gv_cAMERA[1] = CameraInfoFromId(9);
    gv_cAMERA[2] = CameraInfoFromId(24);
    gv_cAMERA[3] = CameraInfoFromId(25);
    gv_cAMERA[4] = CameraInfoFromId(26);
    gv_cAMERA[5] = CameraInfoFromId(27);
    gv_cAMERA[6] = CameraInfoFromId(28);
    gv_cAMERA[7] = CameraInfoFromId(29);
    gv_cAMERA[8] = CameraInfoFromId(30);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F47368FE"));
    SoundPlay(SoundLink("UI_ScoreScreenMissionName", 0), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    gf_setnametags();
    TriggerExecute(gt_data_verify, true, true);
    TriggerExecute(gt_board_init, true, true);
    gf_setally();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A1755587"));
    SoundPlay(SoundLink("UI_ReplayDropdownListSelect", 0), PlayerGroupAll(), 100.0, 0.0);
    TriggerExecute(gt_init_menu, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_Init () {
    gt_init = TriggerCreate("gt_init_Func");
    TriggerAddEventMapInit(gt_init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init_menu
//--------------------------------------------------------------------------------------------------
bool gt_init_menu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto52629BCE_n = 10;
    int auto52629BCE_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_display_map_select_text();
    DialogCreate(644, 542, c_anchorCenter, 0, 144, true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 594, 164, c_anchorTop, 0, 25, StringExternal("Param/Value/18A14074"), StringExternal("Param/Value/C9EE629B"), "");
    gv_btn_space = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 594, 164, c_anchorTop, 0, 25, StringToText(""), "Assets\\Textures\\ui_scorescreen_splash_thorner03.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeLighten);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 594, 164, c_anchorTop, 0, 189, StringExternal("Param/Value/F03FE3EC"), StringExternal("Param/Value/0D4E0DE2"), "");
    gv_btn_forest = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 594, 164, c_anchorTop, 0, 189, StringToText(""), "Assets\\Textures\\ui_scorescreen_splash_ttosh02.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeLighten);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 594, 164, c_anchorTop, 0, 353, StringExternal("Param/Value/42DB3628"), StringExternal("Param/Value/1EFB40A4"), "");
    gv_btn_lava = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 594, 164, c_anchorTop, 0, 353, StringToText(""), "Assets\\Textures\\ui_scorescreen_splash_ttosh01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeLighten);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    for (auto52629BCE_i = 1; auto52629BCE_i <= auto52629BCE_n; auto52629BCE_i += 1) {
        Wait(37.5, c_timeReal);
        SoundPlay(SoundLink("ArmorySwannRaynor00050", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5F7FA20E"));
        Wait(7.5, c_timeReal);
        SoundPlay(SoundLink("Ghost_SnipeLaunch", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundPlay(SoundLink("TValerian02ARaynor00051", -1), PlayerGroupAll(), 100.0, 0.0);
        GameOver(gv_host, c_gameOverDefeat, false, false);
        gv_player_is_human[gv_host] = false;
        gv_host = gf_select_random_human();
        gf_display_map_select_text();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_menu_Init () {
    gt_init_menu = TriggerCreate("gt_init_menu_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: init_btnswitch
//--------------------------------------------------------------------------------------------------
bool gt_init_btnswitch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto891FAAD3_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_host))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto891FAAD3_val = EventDialogControl();
    if (auto891FAAD3_val == gv_btn_space) {
        TriggerStop(gt_init_menu);
        RegionPlayableMapSet(RegionFromId(49));
        gv_spawn = RegionFromId(10);
        GameSetLighting("Ulnar", 0.0);
        SoundSetReverb("Dizzy", 0.0, true, true);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny);
        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_BraxisAlpha", c_soundtrackCueAny, c_soundtrackIndexAny);
        gv_environment = 0;
        DialogDestroyAll();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4F25F63D"));
        TriggerExecute(gt_init_scorecap, true, false);
    }
    else if (auto891FAAD3_val == gv_btn_forest) {
        TriggerStop(gt_init_menu);
        RegionPlayableMapSet(RegionFromId(50));
        gv_spawn = RegionFromId(11);
        GameSetLighting("Agria", 0.0);
        SoundSetReverb("Forest", 0.0, true, true);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny);
        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Haven", c_soundtrackCueAny, c_soundtrackIndexAny);
        gv_environment = 1;
        gv_railgun_allowed = false;
        DialogDestroyAll();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/924837FD"));
        TriggerExecute(gt_init_scorecap, true, false);
    }
    else if (auto891FAAD3_val == gv_btn_lava) {
        TriggerStop(gt_init_menu);
        RegionPlayableMapSet(RegionFromId(51));
        gv_spawn = RegionFromId(14);
        GameSetLighting("AgriaSunset", 0.0);
        SoundSetReverb("CarpetedHallway", 0.0, true, true);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Silence", c_soundtrackCueAny, c_soundtrackIndexAny);
        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryAmbience, "Ambience_Redstone", c_soundtrackCueAny, c_soundtrackIndexAny);
        gv_environment = 2;
        gv_railgun_allowed = true;
        DialogDestroyAll();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C7BF680A"));
        TriggerExecute(gt_init_scorecap, true, false);
        TriggerExecute(gt_volcanoloop, true, false);
    }
    else if (auto891FAAD3_val == gv_btn_ffa_minus) {
        if ((gv_round_limit > 1)) {
            gv_round_limit -= 1;
        }

        libNtve_gf_SetDialogItemText(gv_btn_ffa_num, gf_btntext_wincount(), PlayerGroupAll());
    }
    else if (auto891FAAD3_val == gv_btn_ffa_plus) {
        if ((gv_round_limit < 5)) {
            gv_round_limit += 1;
        }

        libNtve_gf_SetDialogItemText(gv_btn_ffa_num, gf_btntext_wincount(), PlayerGroupAll());
    }
    else if (auto891FAAD3_val == gv_btn_ffa_num) {
        DialogDestroyAll();
        TriggerExecute(gt_init_game, true, false);
    }
    else if (auto891FAAD3_val == gv_btn_ffa_railgun) {
        gv_railgun_allowed = !(gv_railgun_allowed);
        libNtve_gf_SetDialogItemText(gv_btn_ffa_railgun, gf_btntext_railgun(gv_railgun_allowed), PlayerGroupAll());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_btnswitch_Init () {
    gt_init_btnswitch = TriggerCreate("gt_init_btnswitch_Func");
    TriggerAddEventDialogControl(gt_init_btnswitch, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init_scorecap
//--------------------------------------------------------------------------------------------------
bool gt_init_scorecap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto9DF95D60_val;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogDestroyAll();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/8E0FE9BE") + PlayerName(gv_host) + StringExternal("Param/Value/871D1198")));
    DialogCreate(1115, 344, c_anchorCenter, 0, 0, true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 255, 294, c_anchorRight, 25, 0, StringToText(""), StringExternal("Param/Value/2A01837A"), "");
    gv_btn_ffa_plus = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 255, 294, c_anchorLeft, 25, 0, StringToText(""), StringExternal("Param/Value/F8DFC780"), "");
    gv_btn_ffa_minus = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 555, 294, c_anchorCenter, 0, 0, StringToText(""), gf_btntext_wincount(), "");
    gv_btn_ffa_num = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1065, 294, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_scorescreen_splash_tvalerian02a.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeLighten);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    auto9DF95D60_val = gv_environment;
    if (auto9DF95D60_val == 0) {
        DialogCreate(760, 246, c_anchorCenter, 0, 300, true);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 710, 196, c_anchorCenter, 0, 0, StringToText(""), gf_btntext_railgun(gv_railgun_allowed), "");
        gv_btn_ffa_railgun = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 710, 196, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_scorescreen_splash_tvalerian02b.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeLighten);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }
    else {
    }
    gf_camera_shuffle();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_scorecap_Init () {
    gt_init_scorecap = TriggerCreate("gt_init_scorecap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: init_game
//--------------------------------------------------------------------------------------------------
bool gt_init_game_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    bool auto8013FC96_val;
    const int auto78398097_ae = gv_const_maxdisc;
    int auto78398097_var;
    const int autoBA5F2D2D_ae = gv_const_maxdisc;
    int autoBA5F2D2D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
        Wait(RandomFixed(0.0, 1.0), c_timeGame);
        if ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
            return true;
        }

    }
    gf_parse_is_active();
    TriggerExecute(gt_coverage, true, true);
    auto8013FC96_val = gv_railgun_allowed;
    if (auto8013FC96_val == false) {
        auto78398097_var = 1;
        for ( ; auto78398097_var <= auto78398097_ae; auto78398097_var += 1 ) {
            TechTreeAbilityAllow(auto78398097_var, AbilityCommand("NovaSnipe", 0), false);
        }
    }
    else if (auto8013FC96_val == true) {
        autoBA5F2D2D_var = 1;
        for ( ; autoBA5F2D2D_var <= autoBA5F2D2D_ae; autoBA5F2D2D_var += 1 ) {
            TechTreeAbilityAllow(autoBA5F2D2D_var, AbilityCommand("NovaSnipe", 0), true);
        }
    }
    else {
    }
    TriggerEnable(gt_death_track, true);
    TriggerExecute(gt_init_prestage, true, false);
    TriggerExecute(gt_AI_loop, true, false);
    TriggerExecute(gt_track_count, true, false);
    gf_board_update();
    BoardSetState(gv_bOARD, PlayerGroupAll(), c_boardStateShowing, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_game_Init () {
    gt_init_game = TriggerCreate("gt_init_game_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: track_count
//--------------------------------------------------------------------------------------------------
bool gt_track_count_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i_old;
    int lv_i;
    int[4] lv_t_new;
    int[4] lv_t_old;

    // Automatic Variable Declarations
    int auto45735250_val;
    bool autoB5E0D58E_val;
    int auto0A438640_val;
    int auto87B46F38_val;
    int auto944347ED_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto45735250_val = gv_const_gametype;
    if (auto45735250_val == 1) {
        lv_i = UnitGroupCount(UnitGroup("Ghost", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_i_old = lv_i;
    }
    else if (auto45735250_val == 2) {
        lv_t_new[1] = UnitGroupCount(gv_team_agent[1], c_unitCountAlive);
        lv_t_new[2] = UnitGroupCount(gv_team_agent[2], c_unitCountAlive);
        lv_t_old[1] = lv_t_new[1];
        lv_t_old[2] = lv_t_new[2];
    }
    else {
    }
    while (true) {
        Wait(1.5, c_timeGame);
        gf_board_update();
        autoB5E0D58E_val = gv_spawn_protect;
        if (autoB5E0D58E_val == false) {
            auto0A438640_val = gv_const_gametype;
            if (auto0A438640_val == 1) {
                lv_i = UnitGroupCount(UnitGroup("Ghost", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if ((lv_i != lv_i_old)) {
                    lv_i_old = lv_i;
                    auto87B46F38_val = lv_i;
                    if (auto87B46F38_val == 0) {
                        gf_finish_round(0);
                    }
                    else if (auto87B46F38_val == 1) {
                        gf_finish_round(1);
                    }
                    else {
                        SoundPlayForPlayer(SoundLink("WidowMine_ArmedBeep", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/55CCEE3D") + IntToText(lv_i) + StringExternal("Param/Value/E9B4328E")));
                        Wait(0.5, c_timeGame);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/A9F8D2BF") + IntToText(lv_i) + StringExternal("Param/Value/012C5604")));
                    }
                }

            }
            else if (auto0A438640_val == 2) {
                lv_t_new[1] = UnitGroupCount(gv_team_agent[1], c_unitCountAlive);
                lv_t_new[2] = UnitGroupCount(gv_team_agent[2], c_unitCountAlive);
                if (((lv_t_new[1] != lv_t_old[1]) || (lv_t_new[2] != lv_t_old[2]))) {
                    lv_t_old[1] = lv_t_new[1];
                    lv_t_old[2] = lv_t_new[2];
                    if ((lv_t_new[1] == 0) && (lv_t_new[2] == 0)) {
                        gf_finish_round(0);
                    }

                    if ((lv_t_new[1] != 0) && (lv_t_new[2] == 0)) {
                        gf_finish_round(1);
                    }

                    if ((lv_t_new[1] == 0) && (lv_t_new[2] != 0)) {
                        gf_finish_round(2);
                    }

                    if ((lv_t_new[1] != 0) && (lv_t_new[2] != 0)) {
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/97C8F7EA") + IntToText(lv_t_new[1]) + StringExternal("Param/Value/6D75486B") + IntToText(lv_t_new[2]) + StringExternal("Param/Value/79BF271A")));
                        Wait(0.5, c_timeGame);
                        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/361E4633") + IntToText(lv_t_new[1]) + StringExternal("Param/Value/34B581E0") + IntToText(lv_t_new[2]) + StringExternal("Param/Value/31B2C2B7")));
                    }

                }

            }
            else {
            }
        }
        else if (autoB5E0D58E_val == true) {
            auto944347ED_val = gv_const_gametype;
            if (auto944347ED_val == 1) {
                lv_i = -1;
                lv_i_old = lv_i;
            }
            else if (auto944347ED_val == 2) {
                lv_t_new[1] = -1;
                lv_t_new[2] = -1;
                lv_t_old[1] = lv_t_new[1];
                lv_t_old[2] = lv_t_new[2];
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_track_count_Init () {
    gt_track_count = TriggerCreate("gt_track_count_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: init_prestage
//--------------------------------------------------------------------------------------------------
bool gt_init_prestage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    text lv_txt;
    int lv_txt_line;
    region lv_area_temp;
    region lv_area_team1;
    region lv_area_team2;
    point lv_location;
    int lv_t1;
    int lv_t2;

    // Automatic Variable Declarations
    int autoD7DD8EB2_val;
    const int auto8F6FC183_ae = gv_const_maxdisc;
    const int auto8F6FC183_ai = 1;
    int autoE1858E3D_val;
    int auto6B38B5CF_val;
    int autoE2A3C153_val;
    playergroup auto9C8C957E_g;
    playergroup auto3AADAE82_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_area_team1 = RegionCircle(RegionRandomPoint(gv_spawn), 2.0);
    lv_area_team2 = RegionCircle(RegionRandomPoint(gv_spawn), 2.0);
    autoD7DD8EB2_val = gv_environment;
    if (autoD7DD8EB2_val == 0) {
        TimerStart(gv_railgun_timer, 60.0, false, c_timeGame);
        TimerStart(gv_sUDDEN_TIMER, 180.0, false, c_timeGame);
    }
    else if (autoD7DD8EB2_val == 1) {
        TimerStart(gv_sUDDEN_TIMER, 180.0, false, c_timeGame);
    }
    else if (autoD7DD8EB2_val == 2) {
        TimerStart(gv_railgun_timer, 60.0, false, c_timeGame);
        TimerStart(gv_sUDDEN_TIMER, (60.0 + RandomInt(0, 120)), false, c_timeGame);
    }
    else {
    }
    lv_i = 1;
    for ( ; ( (auto8F6FC183_ai >= 0 && lv_i <= auto8F6FC183_ae) || (auto8F6FC183_ai < 0 && lv_i >= auto8F6FC183_ae) ) ; lv_i += auto8F6FC183_ai ) {
        if ((gv_player_active[lv_i] == false)) {
            continue;
        }

        autoE1858E3D_val = gv_const_gametype;
        if (autoE1858E3D_val == 1) {
            lv_area_temp = gv_spawn;
        }
        else if (autoE1858E3D_val == 2) {
            if ((PlayerGroupHasPlayer(gv_active_player_group_red, lv_i) == true)) {
                lv_area_temp = lv_area_team1;
            }

            if ((PlayerGroupHasPlayer(gv_active_player_group_blue, lv_i) == true)) {
                lv_area_temp = lv_area_team2;
            }

        }
        else {
        }
        lv_location = RegionRandomPoint(lv_area_temp);
        while ((CliffLevel(lv_location) != 1)) {
            lv_location = RegionRandomPoint(lv_area_temp);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ghost", 0, lv_i, lv_location);
        gv_sNIPER[lv_i] = UnitLastCreated();
        UnitGroupAdd(gv_team_agent[0], gv_sNIPER[lv_i]);
        auto6B38B5CF_val = gv_environment;
        {
            CameraApplyInfo(lv_i, gv_cAMERA[lv_i], 0.0, -1, 0, false);
            CameraSetValue(lv_i, c_cameraValueYaw, gv_cameraangle[lv_i], 0.0, -1, 0.0);
            CameraPan(lv_i, UnitGetPosition(gv_sNIPER[lv_i]), 0.0, -1, 0, false);
            CameraLookAtUnit(lv_i, null);
            CameraFollowUnitGroup(lv_i, libNtve_gf_ConvertUnitToUnitGroup(gv_sNIPER[lv_i]), true, false);
            UnitSelect(gv_sNIPER[lv_i], lv_i, true);
        }
        CameraLockInput(lv_i, true);
    }
    autoE2A3C153_val = gv_const_gametype;
    if (autoE2A3C153_val == 1) {
    }
    else if (autoE2A3C153_val == 2) {
        auto9C8C957E_g = gv_active_player_group_red;
        lv_i = -1;
        while (true) {
            lv_i = PlayerGroupNextPlayer(auto9C8C957E_g, lv_i);
            if (lv_i < 0) { break; }
            UnitGroupAdd(gv_team_agent[1], gv_sNIPER[lv_i]);
            libNtve_gf_SendActorMessageToUnit(gv_sNIPER[lv_i], "Signal GlowSet");
            libNtve_gf_SendActorMessageToUnit(gv_sNIPER[lv_i], "Signal GlowRed");
            TextTagCreate(gv_const_playername[lv_i], 16, UnitGetPosition(gv_sNIPER[lv_i]), 0.0, true, true, gv_active_player_group_red);
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagAttachToUnit(TextTagLastCreated(), gv_sNIPER[lv_i], 0.0);
            gv_sNIPER_TAG[lv_i] = TextTagLastCreated();
        }
        auto3AADAE82_g = gv_active_player_group_blue;
        lv_i = -1;
        while (true) {
            lv_i = PlayerGroupNextPlayer(auto3AADAE82_g, lv_i);
            if (lv_i < 0) { break; }
            UnitGroupAdd(gv_team_agent[2], gv_sNIPER[lv_i]);
            libNtve_gf_SendActorMessageToUnit(gv_sNIPER[lv_i], "Signal GlowSet");
            libNtve_gf_SendActorMessageToUnit(gv_sNIPER[lv_i], "Signal GlowBlue");
            TextTagCreate(gv_const_playername[lv_i], 16, UnitGetPosition(gv_sNIPER[lv_i]), 0.0, true, true, gv_active_player_group_blue);
            TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
            TextTagAttachToUnit(TextTagLastCreated(), gv_sNIPER[lv_i], 0.0);
            gv_sNIPER_TAG[lv_i] = TextTagLastCreated();
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/3B7AFF33") + IntToText(UnitGroupCount(gv_team_agent[1], c_unitCountAlive)) + StringExternal("Param/Value/7FA3B2EA") + IntToText(UnitGroupCount(gv_team_agent[2], c_unitCountAlive)) + StringExternal("Param/Value/8CCEFFAC")));
    }
    else {
    }
    gf_AI_update_skill_rates();
    TriggerExecute(gt_spawn_protection, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_prestage_Init () {
    gt_init_prestage = TriggerCreate("gt_init_prestage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn_protection
//--------------------------------------------------------------------------------------------------
bool gt_spawn_protection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    actor[gv_const_maxdisc + 1] lv_fX1;
    actor[gv_const_maxdisc + 1] lv_fX2;
    sound[gv_const_maxdisc + 1] lv_fX3;
    int lv_maxtimer;

    // Automatic Variable Declarations
    const int autoBCE7FA11_ae = gv_const_maxdisc;
    const int autoBCE7FA11_ai = 1;
    int auto2F52F12E_val;
    const int auto1C2A294B_ae = 1;
    const int auto1C2A294B_ai = -1;
    const int autoA8557914_ae = gv_const_maxdisc;
    const int autoA8557914_ai = 1;

    // Variable Initialization
    lv_maxtimer = 10;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoBCE7FA11_ai >= 0 && lv_i <= autoBCE7FA11_ae) || (autoBCE7FA11_ai < 0 && lv_i >= autoBCE7FA11_ae) ) ; lv_i += autoBCE7FA11_ai ) {
        if ((UnitIsAlive(gv_sNIPER[lv_i]) == true)) {
            libNtve_gf_CreateModelAtPoint("TimeWarpLaunch", UnitGetPosition(gv_sNIPER[lv_i]));
            lv_fX1[lv_i] = libNtve_gf_ActorLastCreated();
            libNtve_gf_AttachModelToUnit(gv_sNIPER[lv_i], "TimeWarp", "Ref_Center");
            lv_fX2[lv_i] = libNtve_gf_ActorLastCreated();
            SoundPlayAtPointForPlayer(SoundLink("Mothership_AttackImpact", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_sNIPER[lv_i]), 0.0, 100.0, 0.0);
            SoundPlayOnUnitForPlayer(SoundLink("Doodad_DevourerTissueStasisTubeStandLoop", -1), c_maxPlayers, PlayerGroupAll(), gv_sNIPER[lv_i], 0.0, 100.0, 0.0);
            lv_fX3[lv_i] = SoundLastPlayed();
            libNtve_gf_MakeUnitInvulnerable(gv_sNIPER[lv_i], true);
            UnitSetPropertyFixed(gv_sNIPER[lv_i], c_unitPropLifeMax, 10000.0);
            UnitSetPropertyFixed(gv_sNIPER[lv_i], c_unitPropEnergyMax, 0.0);
        }

    }
    gv_spawn_protect = true;
    auto2F52F12E_val = gv_environment;
    if (auto2F52F12E_val == 3) {
        lv_maxtimer = 10;
    }
    else {
    }
    lv_i = lv_maxtimer;
    for ( ; ( (auto1C2A294B_ai >= 0 && lv_i <= auto1C2A294B_ae) || (auto1C2A294B_ai < 0 && lv_i >= auto1C2A294B_ae) ) ; lv_i += auto1C2A294B_ai ) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/C714C4F0") + IntToText(lv_i) + StringExternal("Param/Value/8785CF2F")));
        if ((lv_i <= 3)) {
            SoundPlayForPlayer(SoundLink("UI_TutorialSelect", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        if ((lv_i == 6) && (gv_environment == 3)) {
            SoundPlayForPlayer(SoundLink("SC_Shell_Kerrigan_Psi_PowerBall", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        if ((lv_i == 12) && (gv_environment == 3)) {
            SoundPlayForPlayer(SoundLink("Event_Space02_CameraQuake", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }

        Wait(1.0, c_timeReal);
    }
    gv_round_count += 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (StringExternal("Param/Value/04FEC1FE") + IntToText(gv_round_count) + StringExternal("Param/Value/B14DB180")));
    lv_i = 1;
    for ( ; ( (autoA8557914_ai >= 0 && lv_i <= autoA8557914_ae) || (autoA8557914_ai < 0 && lv_i >= autoA8557914_ae) ) ; lv_i += autoA8557914_ai ) {
        if ((UnitIsAlive(gv_sNIPER[lv_i]) == true)) {
            UnitSetPropertyFixed(gv_sNIPER[lv_i], c_unitPropLifeMax, 100.0);
            UnitSetPropertyFixed(gv_sNIPER[lv_i], c_unitPropEnergyMax, 100.0);
            libNtve_gf_MakeUnitInvulnerable(gv_sNIPER[lv_i], false);
            SoundStop(lv_fX3[lv_i], true);
            SoundPlayAtPointForPlayer(SoundLink("VoidRay_WeaponEnd", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_sNIPER[lv_i]), 0.0, 100.0, 0.0);
            libNtve_gf_KillModel(lv_fX1[lv_i]);
            libNtve_gf_KillModel(lv_fX2[lv_i]);
            TimerStart(gv_actionrate_timer[lv_i], c_timerDurationInfinite, false, c_timeGame);
        }

    }
    SoundPlayForPlayer(SoundLink("buzzer", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    gv_spawn_protect = false;
    gv_suddendeath_halt = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/3806D306"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawn_protection_Init () {
    gt_spawn_protection = TriggerCreate("gt_spawn_protection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: reset
//--------------------------------------------------------------------------------------------------
bool gt_reset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    unit lv_u;

    // Automatic Variable Declarations
    int auto21F96E20_val;
    unitgroup autoAAF1E8F7_g;
    int autoAAF1E8F7_u;
    const int auto2B0DC428_ae = gv_var_forest_array;
    const int auto2B0DC428_ai = 1;
    unitgroup autoDB3B5138_g;
    int autoDB3B5138_u;
    unitgroup auto03DCA380_g;
    int auto03DCA380_u;
    unitgroup autoBAD5C1A3_g;
    int autoBAD5C1A3_u;
    const int autoA915A936_ae = gv_const_maxdisc;
    int autoA915A936_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
        Wait(RandomFixed(0.0, 1.0), c_timeGame);
        if ((TriggerActiveCount(TriggerGetCurrent()) > 1)) {
            return true;
        }

    }
    auto21F96E20_val = gv_environment;
    if (auto21F96E20_val == 0) {
        autoAAF1E8F7_g = gv_coverage_group_array[0];
        autoAAF1E8F7_u = UnitGroupCount(autoAAF1E8F7_g, c_unitCountAll);
        for (;; autoAAF1E8F7_u -= 1) {
            lv_u = UnitGroupUnitFromEnd(autoAAF1E8F7_g, autoAAF1E8F7_u);
            if (lv_u == null) { break; }
            UnitRemove(lv_u);
        }
    }
    else if (auto21F96E20_val == 1) {
        lv_i = 1;
        for ( ; ( (auto2B0DC428_ai >= 0 && lv_i <= auto2B0DC428_ae) || (auto2B0DC428_ai < 0 && lv_i >= auto2B0DC428_ae) ) ; lv_i += auto2B0DC428_ai ) {
            autoDB3B5138_g = gv_coverage_group_array[lv_i];
            autoDB3B5138_u = UnitGroupCount(autoDB3B5138_g, c_unitCountAll);
            for (;; autoDB3B5138_u -= 1) {
                lv_u = UnitGroupUnitFromEnd(autoDB3B5138_g, autoDB3B5138_u);
                if (lv_u == null) { break; }
                UnitRemove(lv_u);
            }
            ActorScopeKill(ActorScopeFromActor(gv_coverage_pool_actor[lv_i]));
            GameDestroyEffects(gv_coverage_location[lv_i], 4.0, 0, "PulseZapRepeat");
            GameDestroyEffects(gv_coverage_location[lv_i], 4.0, 0, "PulseZapRepeatSmall");
        }
    }
    else if (auto21F96E20_val == 2) {
        WaterSetState("Redstone|[Default]", 0.0, c_wtcLinear);
    }
    else {
    }
    auto03DCA380_g = UnitGroup("Ghost", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto03DCA380_u = UnitGroupCount(auto03DCA380_g, c_unitCountAll);
    for (;; auto03DCA380_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto03DCA380_g, auto03DCA380_u);
        if (lv_u == null) { break; }
        UnitRemove(lv_u);
    }
    autoBAD5C1A3_g = UnitGroup("Baneling", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBAD5C1A3_u = UnitGroupCount(autoBAD5C1A3_g, c_unitCountAll);
    for (;; autoBAD5C1A3_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoBAD5C1A3_g, autoBAD5C1A3_u);
        if (lv_u == null) { break; }
        UnitRemove(lv_u);
    }
    autoA915A936_var = 1;
    for ( ; autoA915A936_var <= autoA915A936_ae; autoA915A936_var += 1 ) {
        if ((gv_player_active[autoA915A936_var] == false)) {
            continue;
        }

        TextTagDestroy(gv_sNIPER_TAG[autoA915A936_var]);
        VisRevealerDestroy(gv_railgun_revealer[autoA915A936_var]);
        VisExploreArea(autoA915A936_var, RegionEntireMap(), false, false);
    }
    HelpPanelDestroyAllTips();
    gf_camera_shuffle();
    TriggerExecute(gt_coverage, true, true);
    TriggerExecute(gt_init_prestage, true, false);
    TriggerExecute(gt_AI_loop, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_reset_Init () {
    gt_reset = TriggerCreate("gt_reset_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: pool_enter
//--------------------------------------------------------------------------------------------------
bool gt_pool_enter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    int autoBCFF355A_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_environment == 1))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Ghost"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u = EventUnit();
    autoBCFF355A_val = EventUnitBehaviorChange();
    if (autoBCFF355A_val == c_unitBehaviorChangeCreate) {
        SoundPlayOnUnit(SoundLink("Zerg_ExplosionSlime", 0), PlayerGroupAll(), lv_u, 0.0, 100.0, 0.0);
        if ((UnitHasBehavior(lv_u, "PulseFlameDeBuff") == true)) {
            gf_burnFX(lv_u, lv_u, false);
        }

    }
    else if (autoBCFF355A_val == c_unitBehaviorChangeDestroy) {
        SoundPlayOnUnit(SoundLink("Zerg_ExplosionSlime", 0), PlayerGroupAll(), lv_u, 0.0, 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_pool_enter_Init () {
    gt_pool_enter = TriggerCreate("gt_pool_enter_Func");
    TriggerAddEventUnitBehaviorChange(gt_pool_enter, null, "DiveDebuff", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: coverage
//--------------------------------------------------------------------------------------------------
bool gt_coverage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_location;
    int lv_i;
    int lv_ii;
    bool lv_flag;
    fixed lv_r;

    // Automatic Variable Declarations
    int auto3EC0C640_val;
    const int auto1C02FFCD_n = 16;
    int auto1C02FFCD_i;
    const int auto6B98C877_ae = gv_var_forest_array;
    int auto6B98C877_var;
    const int auto0D950CB4_ae = gv_var_forest_array;
    const int auto0D950CB4_ai = 1;
    const int auto14FA5B18_ae = gv_var_forest_array;
    int auto14FA5B18_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3EC0C640_val = gv_environment;
    if (auto3EC0C640_val == 0) {
        for (auto1C02FFCD_i = 1; auto1C02FFCD_i <= auto1C02FFCD_n; auto1C02FFCD_i += 1) {
            UnitCreate(1, "Bunker", 0, gv_const_dummyplayer, RegionRandomPoint(RegionFromId(10)), 0.0);
            UnitGroupAdd(gv_coverage_group_array[0], UnitLastCreated());
        }
    }
    else if (auto3EC0C640_val == 1) {
        auto6B98C877_var = 1;
        for ( ; auto6B98C877_var <= auto6B98C877_ae; auto6B98C877_var += 1 ) {
            while (true) {
                lv_flag = false;
                gv_coverage_location[auto6B98C877_var] = RegionRandomPoint(RegionFromId(11));
                lv_ii = 1;
                for ( ; ( (auto0D950CB4_ai >= 0 && lv_ii <= auto0D950CB4_ae) || (auto0D950CB4_ai < 0 && lv_ii >= auto0D950CB4_ae) ) ; lv_ii += auto0D950CB4_ai ) {
                    if ((auto6B98C877_var != lv_ii) && (DistanceBetweenPoints(gv_coverage_location[auto6B98C877_var], gv_coverage_location[lv_ii]) < 12.0)) {
                        lv_flag = true;
                    }

                }
                if ((lv_flag == false)) {
                    break;
                }

            }
            gv_forest_pool_type[auto6B98C877_var] = RandomInt(1, 3);
            gf_forestrandom(auto6B98C877_var, gv_coverage_location[auto6B98C877_var], gv_forest_pool_type[auto6B98C877_var]);
        }
        auto14FA5B18_var = 1;
        for ( ; auto14FA5B18_var <= auto14FA5B18_ae; auto14FA5B18_var += 1 ) {
            gf_forestdeform(auto14FA5B18_var);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_coverage_Init () {
    gt_coverage = TriggerCreate("gt_coverage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: volcanoloop
//--------------------------------------------------------------------------------------------------
bool gt_volcanoloop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto2CC09CBB_ae = 10;
    const int auto2CC09CBB_ai = 1;
    int autoAFEB3C8F_val;
    playergroup autoF59DF85B_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_i = 1;
        for ( ; ( (auto2CC09CBB_ai >= 0 && lv_i <= auto2CC09CBB_ae) || (auto2CC09CBB_ai < 0 && lv_i >= auto2CC09CBB_ae) ) ; lv_i += auto2CC09CBB_ai ) {
            gv_cameraangle[lv_i] += 1;
            CameraSetValue(lv_i, c_cameraValueYaw, gv_cameraangle[lv_i], 2.0, -1, 0.0);
        }
        Wait(2.0, c_timeGame);
        autoAFEB3C8F_val = RandomInt(1, 16);
        if (autoAFEB3C8F_val == 16) {
            SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
            autoF59DF85B_g = PlayerGroupAll();
            lv_i = -1;
            while (true) {
                lv_i = PlayerGroupNextPlayer(autoF59DF85B_g, lv_i);
                if (lv_i < 0) { break; }
                CameraShakeStart(lv_i, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.025, 10.0, 100.0, 5.0);
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_volcanoloop_Init () {
    gt_volcanoloop = TriggerCreate("gt_volcanoloop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: suddendeath
//--------------------------------------------------------------------------------------------------
bool gt_suddendeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_r;
    int lv_x;
    int lv_y;
    int lv_k;
    int lv_i;
    fixed lv_delay;
    unit lv_u;
    unit lv_wall;
    actor lv_fX;

    // Automatic Variable Declarations
    int auto4DEC3862_val;
    const int autoEFCE1725_n = 4;
    int autoEFCE1725_i;
    int auto752231E5_val;
    const int autoE81B855D_n = 4;
    int autoE81B855D_i;
    int auto1A1625BD_n;
    int auto1A1625BD_i;
    unitgroup auto3F69C574_g;
    int auto3F69C574_u;
    int autoFCA251C4_val;
    bool auto599793DE_val;
    bool auto52E82143_val;
    bool auto73194C36_val;
    bool auto0872D0A1_val;
    bool autoC0D9C625_val;
    playergroup autoBE52DBF5_g;
    unitgroup auto39FFB5B1_g;
    int auto39FFB5B1_u;
    bool autoA03A7218_val;
    bool autoAD617042_val;
    playergroup auto75524C7F_g;
    bool auto760A24D8_val;
    playergroup auto911B34AE_g;
    bool auto43BD2133_val;
    const int auto3E32AFA0_n = 8;
    int auto3E32AFA0_i;
    const int auto52A644AE_n = 4;
    int auto52A644AE_i;
    bool autoC4EC2627_val;
    const int auto36B0D0D1_n = 8;
    int auto36B0D0D1_i;
    const int autoAC04581D_n = 4;
    int autoAC04581D_i;
    bool autoB20DB7A5_val;
    playergroup autoA61EC1CE_g;
    playergroup auto517A07F4_g;
    playergroup autoC183D6A0_g;
    playergroup auto40DEE17A_g;

    // Variable Initialization
    lv_i = 6;
    lv_delay = 0.75;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4DEC3862_val = gv_environment;
    if (auto4DEC3862_val == 0) {
        SoundPlay(SoundLink("Tychus04BriefingAlarm", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/2DEDE9CC")));
        lv_r = RandomInt(0, 3);
        for (autoEFCE1725_i = 1; autoEFCE1725_i <= autoEFCE1725_n; autoEFCE1725_i += 1) {
            auto752231E5_val = lv_r;
            if (auto752231E5_val == 0) {
                lv_x = (FixedToInt(PointGetX(PointFromId(1601060614))) + lv_k);
                lv_y = (FixedToInt(PointGetY(PointFromId(1601060614))) + lv_k);
            }
            else if (auto752231E5_val == 1) {
                lv_x = (FixedToInt(PointGetX(PointFromId(576696175))) - lv_k);
                lv_y = (FixedToInt(PointGetY(PointFromId(576696175))) + lv_k);
            }
            else if (auto752231E5_val == 2) {
                lv_x = (FixedToInt(PointGetX(PointFromId(1328576880))) - lv_k);
                lv_y = (FixedToInt(PointGetY(PointFromId(1328576880))) - lv_k);
            }
            else if (auto752231E5_val == 3) {
                lv_x = (FixedToInt(PointGetX(PointFromId(632776355))) + lv_k);
                lv_y = (FixedToInt(PointGetY(PointFromId(632776355))) - lv_k);
            }
            else {
            }
            for (autoE81B855D_i = 1; autoE81B855D_i <= autoE81B855D_n; autoE81B855D_i += 1) {
                auto1A1625BD_n = lv_i;
                for (auto1A1625BD_i = 1; auto1A1625BD_i <= auto1A1625BD_n; auto1A1625BD_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", c_unitCreateIgnorePlacement, 9, Point(lv_x, lv_y));
                    UnitGroupAdd(gv_coverage_group_array[0], UnitLastCreated());
                    Wait(4.0, c_timeGame);
                    auto3F69C574_g = UnitGroup(null, c_playerAny, RegionRect((lv_x - 4), (lv_y - 4), (lv_x + 4), (lv_y + 4)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    auto3F69C574_u = UnitGroupCount(auto3F69C574_g, c_unitCountAll);
                    for (;; auto3F69C574_u -= 1) {
                        lv_u = UnitGroupUnitFromEnd(auto3F69C574_g, auto3F69C574_u);
                        if (lv_u == null) { break; }
                        if ((UnitGetType(lv_u) != "TerranDropPod") && (UnitGetType(lv_u) != "Baneling")) {
                            UnitKill(lv_u);
                        }

                    }
                    autoFCA251C4_val = lv_r;
                    if (autoFCA251C4_val == 0) {
                        lv_x += 6;
                    }
                    else if (autoFCA251C4_val == 1) {
                        lv_y += 6;
                    }
                    else if (autoFCA251C4_val == 2) {
                        lv_x -= 6;
                    }
                    else if (autoFCA251C4_val == 3) {
                        lv_y -= 6;
                    }
                    else {
                    }
                    auto599793DE_val = gv_suddendeath_halt;
                    if (auto599793DE_val == true) {
                        break;
                    }
                    else {
                    }
                }
                if (lv_r >= 3) {
                    lv_r = 0;
                }
                else {
                    lv_r = lv_r + 1;
                }
                auto52E82143_val = gv_suddendeath_halt;
                if (auto52E82143_val == true) {
                    break;
                }
                else {
                }
            }
            lv_k += 6;
            lv_i -= 2;
            auto73194C36_val = gv_suddendeath_halt;
            if (auto73194C36_val == true) {
                break;
            }
            else {
            }
        }
        auto0872D0A1_val = gv_suddendeath_halt;
        if (auto0872D0A1_val == true) {
            return true;
        }
        else {
        }
        SoundPlay(SoundLink("Obliterate_Charge", -1), PlayerGroupAll(), 100.0, 0.0);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(10)));
        Wait(0.75, c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(10)));
        Wait(0.75, c_timeGame);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionGetCenter(RegionFromId(10)));
        Wait(0.75, c_timeGame);
        autoC0D9C625_val = gv_suddendeath_halt;
        if (autoC0D9C625_val == true) {
            return true;
        }
        else if (autoC0D9C625_val == false) {
            SoundPlay(SoundLink("NullCircuit_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
            autoBE52DBF5_g = PlayerGroupAll();
            lv_i = -1;
            while (true) {
                lv_i = PlayerGroupNextPlayer(autoBE52DBF5_g, lv_i);
                if (lv_i < 0) { break; }
                CameraShakeStart(lv_i, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.25, 10.0, 100.0, 0.1);
            }
            UnitCreate(1, "Beacon_Terran", c_unitCreateIgnorePlacement, gv_const_dummyplayer, RegionGetCenter(RegionFromId(10)), RandomFixed(0.0, 360.0));
            UnitGroupAdd(gv_coverage_group_array[0], UnitLastCreated());
        }
        else {
        }
    }
    else if (auto4DEC3862_val == 1) {
        SoundPlay(SoundLink("Dog_Howl", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/F5B9124B")));
        lv_x = FixedToInt(PointGetX(PointFromId(1876974817)));
        while ((lv_x <= FixedToInt(PointGetX(PointFromId(1469715834))))) {
            libNtve_gf_CreateModelAtPoint("WallOfFire", Point(lv_x, FixedToInt(PointGetY(PointFromId(1876974817)))));
            lv_fX = libNtve_gf_ActorLastCreated();
            libNtve_gf_SendActorMessageToGameRegion(RegionRect((lv_x - 4), FixedToInt(PointGetY(PointFromId(1876974817))), lv_x, FixedToInt(PointGetY(PointFromId(1469715834)))), "Signal TreeFire");
            SoundPlayForPlayer(SoundLink("Warbot_FlameThrowerAttackLaunch", -1), c_maxPlayers, PlayerGroupAll(), 40.0, 0.0);
            auto39FFB5B1_g = UnitGroup(null, c_playerAny, RegionRect((lv_x - 4), FixedToInt(PointGetY(PointFromId(1876974817))), lv_x, FixedToInt(PointGetY(PointFromId(1469715834)))), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto39FFB5B1_u = UnitGroupCount(auto39FFB5B1_g, c_unitCountAll);
            for (;; auto39FFB5B1_u -= 1) {
                lv_u = UnitGroupUnitFromEnd(auto39FFB5B1_g, auto39FFB5B1_u);
                if (lv_u == null) { break; }
                if ((UnitGetType(lv_u) == "Ghost") && (UnitHasBehavior(lv_u, "DiveDebuff") == false)) {
                    UnitKill(lv_u);
                }

            }
            lv_x += 1;
            if ((lv_x > FixedToInt(PointGetX(PointFromId(1469715834))))) {
                lv_x = FixedToInt(PointGetX(PointFromId(1876974817)));
                if ((lv_delay > 0.2)) {
                    lv_delay -= 0.05;
                }

            }

            Wait(lv_delay, c_timeGame);
            libNtve_gf_KillModel(lv_fX);
            autoA03A7218_val = gv_suddendeath_halt;
            if (autoA03A7218_val == true) {
                break;
            }
            else {
            }
        }
    }
    else if (auto4DEC3862_val == 2) {
        SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/E4216853")));
        Wait(10.0, c_timeGame);
        autoAD617042_val = gv_suddendeath_halt;
        if (autoAD617042_val == true) {
            return true;
        }
        else {
        }
        SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
        WaterSetState("Redstone|Alternate Setting", 4.0, c_wtcLinear);
        auto75524C7F_g = PlayerGroupAll();
        lv_i = -1;
        while (true) {
            lv_i = PlayerGroupNextPlayer(auto75524C7F_g, lv_i);
            if (lv_i < 0) { break; }
            CameraShakeStart(lv_i, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.025, 10.0, 100.0, 5.0);
        }
        Wait(10.0, c_timeGame);
        auto760A24D8_val = gv_suddendeath_halt;
        if (auto760A24D8_val == true) {
            return true;
        }
        else {
        }
        SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
        auto911B34AE_g = PlayerGroupAll();
        lv_i = -1;
        while (true) {
            lv_i = PlayerGroupNextPlayer(auto911B34AE_g, lv_i);
            if (lv_i < 0) { break; }
            CameraShakeStart(lv_i, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.05, 10.0, 100.0, 10.0);
        }
        Wait(4.0, c_timeGame);
        auto43BD2133_val = gv_suddendeath_halt;
        if (auto43BD2133_val == true) {
            return true;
        }
        else {
        }
        SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
        for (auto3E32AFA0_i = 1; auto3E32AFA0_i <= auto3E32AFA0_n; auto3E32AFA0_i += 1) {
            for (auto52A644AE_i = 1; auto52A644AE_i <= auto52A644AE_n; auto52A644AE_i += 1) {
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(gv_spawn));
            }
            Wait(0.5, c_timeGame);
        }
        autoC4EC2627_val = gv_suddendeath_halt;
        if (autoC4EC2627_val == true) {
            return true;
        }
        else {
        }
        SoundPlay(SoundLink("TUILavaRising", -1), PlayerGroupAll(), 100.0, 0.0);
        for (auto36B0D0D1_i = 1; auto36B0D0D1_i <= auto36B0D0D1_n; auto36B0D0D1_i += 1) {
            for (autoAC04581D_i = 1; autoAC04581D_i <= autoAC04581D_n; autoAC04581D_i += 1) {
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(gv_spawn));
            }
            Wait(0.25, c_timeGame);
        }
        autoB20DB7A5_val = gv_suddendeath_halt;
        if (autoB20DB7A5_val == true) {
            return true;
        }
        else {
        }
        SoundPlay(SoundLink("Uni_DeathFXFireLarge", -1), PlayerGroupAll(), 100.0, 0.0);
        WaterSetState("Redstone|Alternate Setting 2", 4.0, c_wtcLinear);
        TriggerExecute(gt_suddendeath_extend, true, false);
        autoA61EC1CE_g = PlayerGroupAll();
        lv_i = -1;
        while (true) {
            lv_i = PlayerGroupNextPlayer(autoA61EC1CE_g, lv_i);
            if (lv_i < 0) { break; }
            CameraShakeStart(lv_i, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.2, 10.0, 100.0, 2.0);
        }
        Wait(2.0, c_timeGame);
        auto517A07F4_g = PlayerGroupAll();
        lv_i = -1;
        while (true) {
            lv_i = PlayerGroupNextPlayer(auto517A07F4_g, lv_i);
            if (lv_i < 0) { break; }
            CameraShakeStart(lv_i, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.1, 10.0, 100.0, 1.0);
        }
        Wait(1.0, c_timeGame);
        autoC183D6A0_g = PlayerGroupAll();
        lv_i = -1;
        while (true) {
            lv_i = PlayerGroupNextPlayer(autoC183D6A0_g, lv_i);
            if (lv_i < 0) { break; }
            CameraShakeStart(lv_i, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.05, 10.0, 100.0, 0.5);
        }
        Wait(0.5, c_timeGame);
        auto40DEE17A_g = PlayerGroupAll();
        lv_i = -1;
        while (true) {
            lv_i = PlayerGroupNextPlayer(auto40DEE17A_g, lv_i);
            if (lv_i < 0) { break; }
            CameraShakeStart(lv_i, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.025, 10.0, 100.0, 0.25);
        }
        Wait(0.25, c_timeGame);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_suddendeath_Init () {
    gt_suddendeath = TriggerCreate("gt_suddendeath_Func");
    TriggerAddEventTimer(gt_suddendeath, gv_sUDDEN_TIMER);
}

//--------------------------------------------------------------------------------------------------
// Trigger: suddendeath_extend
//--------------------------------------------------------------------------------------------------
bool gt_suddendeath_extend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    bool autoE19E2694_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_i = UnitGetOwner(UnitGroupRandomUnit(UnitGroup("Ghost", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        if ((PointPathingCliffLevel(UnitGetPosition(gv_sNIPER[lv_i])) <= 1.25)) {
            UnitKill(gv_sNIPER[lv_i]);
        }

        Wait(0.1, c_timeGame);
        autoE19E2694_val = gv_suddendeath_halt;
        if (autoE19E2694_val == true) {
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_suddendeath_extend_Init () {
    gt_suddendeath_extend = TriggerCreate("gt_suddendeath_extend_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: shotline_track
//--------------------------------------------------------------------------------------------------
bool gt_shotline_track_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_i;
    point lv_fIRE_OFFSET;
    point lv_tARGET_OFFSET;
    fixed lv_distancia;
    point lv_current_location;

    // Automatic Variable Declarations
    int auto20AD557E_ae;
    const int auto20AD557E_ai = 1;
    bool auto467CEF3A_val;

    // Variable Initialization
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_fIRE_OFFSET = UnitGetPosition(lv_u);
    lv_tARGET_OFFSET = EventUnitTargetPoint();
    lv_distancia = DistanceBetweenPoints(lv_fIRE_OFFSET, lv_tARGET_OFFSET);
    auto20AD557E_ae = FixedToInt((lv_distancia / 0.5));
    lv_i = 1;
    for ( ; ( (auto20AD557E_ai >= 0 && lv_i <= auto20AD557E_ae) || (auto20AD557E_ai < 0 && lv_i >= auto20AD557E_ae) ) ; lv_i += auto20AD557E_ai ) {
        lv_current_location = libNtve_gf_PointOffsetTowardsPoint(lv_fIRE_OFFSET, (IntToFixed(lv_i) * 0.5), lv_tARGET_OFFSET);
        auto467CEF3A_val = gf_is_path_open(lv_current_location, lv_fIRE_OFFSET, gv_environment);
        if (auto467CEF3A_val == true) {
            UnitCreateEffectPoint(lv_u, "SnipeDamageAOE0_25", lv_current_location);
        }
        else if (auto467CEF3A_val == false) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, libNtve_gf_PointOffsetTowardsPoint(lv_fIRE_OFFSET, (IntToFixed((lv_i - 1)) * 0.5), lv_tARGET_OFFSET));
            break;
        }
        else {
        }
    }
    gv_shots_total[UnitGetOwner(lv_u)] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_shotline_track_Init () {
    gt_shotline_track = TriggerCreate("gt_shotline_track_Func");
    TriggerAddEventUnitAbility(gt_shotline_track, null, AbilityCommand("Snipe", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: force_nontarget_for_humans
//--------------------------------------------------------------------------------------------------
bool gt_force_nontarget_for_humans_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_force_nontarget;
    int lv_p;
    unit lv_u;

    // Automatic Variable Declarations
    int autoE1CB724E_val;
    bool auto17FF907F_val;
    int auto200D5688_val;
    bool auto8318A1DF_val;
    bool auto0F5B6381_val;
    bool auto877BAE35_val;

    // Variable Initialization
    lv_p = EventPlayer();
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnitTargetUnit()) == false)) {
        return true;
    }

    autoE1CB724E_val = gv_const_gametype;
    if (autoE1CB724E_val == 2) {
        auto17FF907F_val = libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_u), UnitGetOwner(EventUnitTargetUnit()), libNtve_ge_PlayerRelation_Ally);
        if (auto17FF907F_val == true) {
            lv_force_nontarget = true;
        }
        else {
        }
    }
    else {
    }
    auto200D5688_val = gv_environment;
    if (auto200D5688_val == 0) {
        auto8318A1DF_val = gv_aI_active[lv_p];
        if (auto8318A1DF_val == false) {
            lv_force_nontarget = true;
        }
        else {
        }
    }
    else if (auto200D5688_val == 1) {
        auto0F5B6381_val = gv_aI_active[lv_p];
        if (auto0F5B6381_val == false) {
            lv_force_nontarget = true;
        }
        else {
        }
        auto877BAE35_val = UnitHasBehavior2(EventUnit(), "DiveDebuff");
        if (auto877BAE35_val == true) {
            lv_force_nontarget = false;
            UnitIssueOrder(lv_u, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            SoundPlayAtPointForPlayer(SoundLink("SwarmHost_EmptyBubbleLaunch", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
        }
        else {
        }
    }
    else if (auto200D5688_val == 2) {
        lv_force_nontarget = true;
    }
    else {
    }
    if ((lv_force_nontarget == true) && (UnitIsAlive(lv_u) == true)) {
        UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("Snipe", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_force_nontarget_for_humans_Init () {
    gt_force_nontarget_for_humans = TriggerCreate("gt_force_nontarget_for_humans_Func");
    TriggerAddEventUnitAbility(gt_force_nontarget_for_humans, null, AbilityCommand("Snipe", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: resist_track
//--------------------------------------------------------------------------------------------------
bool gt_resist_track_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;
    unit lv_rOCK;
    actor lv_fX1;
    actor lv_fX2;
    int lv_i;
    point lv_uNIT_OFFSET;
    point lv_tARGET_OFFSET;
    fixed lv_d;

    // Automatic Variable Declarations
    const fixed auto2E5B85F8_ae = -5.0;
    const fixed auto2E5B85F8_ai = -0.5;
    int auto234A1241_val;
    const int auto2372F2E3_ae = 5;
    const int auto2372F2E3_ai = 1;
    unitgroup auto0F68CC2B_g;
    int auto0F68CC2B_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Ghost"))) {
            return false;
        }

        if (!(((EventUnitDamageEffect() == "SnipeDamage") || (EventUnitDamageEffect() == "SnipeDamageAOE0_25") || (EventUnitDamageEffect() == "SnipeDamageAOE1_00")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = EventPlayer();
    UnitSelect(gv_sNIPER[lv_p], lv_p, false);
    lv_u = EventUnit();
    lv_uNIT_OFFSET = UnitGetPosition(lv_u);
    lv_d = 0.0;
    for ( ; ( (auto2E5B85F8_ai >= 0 && lv_d <= auto2E5B85F8_ae) || (auto2E5B85F8_ai < 0 && lv_d >= auto2E5B85F8_ae) ) ; lv_d += auto2E5B85F8_ai ) {
        if ((PointPathingPassable(libNtve_gf_PointOffsetTowardsPoint(lv_uNIT_OFFSET, lv_d, EventUnitDamageSourcePoint())) == false)) {
            break;
        }

    }
    lv_tARGET_OFFSET = libNtve_gf_PointOffsetTowardsPoint(lv_uNIT_OFFSET, lv_d, EventUnitDamageSourcePoint());
    auto234A1241_val = gv_environment;
    if (auto234A1241_val == 1) {
        lv_i = 1;
        for ( ; ( (auto2372F2E3_ai >= 0 && lv_i <= auto2372F2E3_ae) || (auto2372F2E3_ai < 0 && lv_i >= auto2372F2E3_ae) ) ; lv_i += auto2372F2E3_ai ) {
            auto0F68CC2B_g = UnitGroupSearch("DestructibleRock4x4", c_playerAny, libNtve_gf_PointOffsetTowardsPoint(lv_uNIT_OFFSET, IntToFixed(lv_i), lv_tARGET_OFFSET), 1.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto0F68CC2B_u = UnitGroupCount(auto0F68CC2B_g, c_unitCountAll);
            for (;; auto0F68CC2B_u -= 1) {
                lv_rOCK = UnitGroupUnitFromEnd(auto0F68CC2B_g, auto0F68CC2B_u);
                if (lv_rOCK == null) { break; }
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, UnitGetPosition(lv_rOCK));
                UnitKill(lv_rOCK);
            }
        }
    }
    else {
    }
    gv_aI_donot_move[lv_p] = true;
    UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("move", 0), lv_tARGET_OFFSET), c_orderQueueReplace);
    libNtve_gf_MakeUnitUncommandable(lv_u, true);
    libNtve_gf_AttachModelToUnit(lv_u, "ObliterateExplosion", "Ref_Center");
    lv_fX1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(lv_u, "SmokeMedium", "Ref_Center");
    lv_fX2 = libNtve_gf_ActorLastCreated();
    UnitBehaviorAddPlayer(lv_u, "ResistLimiterRemoval", lv_p, 1);
    UnitBehaviorRemovePlayer(lv_u, "StimpackProtect", lv_p, 1);
    UnitCreateEffectPoint(EventUnitDamageSourceUnit(), "ResistForceSearch", UnitGetPosition(lv_u));
    SoundPlayAtPoint(SoundLink("MindSplatterExplodeSound", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Tosh_PsiShieldBirth", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("Tosh_PsiShieldDeath", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    SoundPlayAtPoint(SoundLink("VoodooLockdownImpact", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
    CameraShakeStart(lv_p, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.05, 10.0, 100.0, 1.0);
    Wait(1.0, c_timeGame);
    UnitSelect(gv_sNIPER[lv_p], lv_p, true);
    UnitBehaviorRemovePlayer(lv_u, "ResistLimiterRemoval", lv_p, 1);
    libNtve_gf_MakeUnitUncommandable(lv_u, false);
    gv_aI_donot_move[lv_p] = false;
    libNtve_gf_KillModel(lv_fX1);
    libNtve_gf_KillModel(lv_fX2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_resist_track_Init () {
    gt_resist_track = TriggerCreate("gt_resist_track_Func");
    TriggerAddEventUnitDamaged(gt_resist_track, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: pulse_command
//--------------------------------------------------------------------------------------------------
bool gt_pulse_command_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_dUMMY;
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup auto7CC5BE0D_g;
    int auto7CC5BE0D_u;
    unit auto7CC5BE0D_var;
    unitgroup auto94098376_g;
    int auto94098376_u;
    unit auto94098376_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_environment == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7CC5BE0D_g = UnitGroupSearch("SupplyDepot", c_playerAny, EventUnitTargetPoint(), 2.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2);
    auto7CC5BE0D_u = UnitGroupCount(auto7CC5BE0D_g, c_unitCountAll);
    for (;; auto7CC5BE0D_u -= 1) {
        auto7CC5BE0D_var = UnitGroupUnitFromEnd(auto7CC5BE0D_g, auto7CC5BE0D_u);
        if (auto7CC5BE0D_var == null) { break; }
        UnitIssueOrder(auto7CC5BE0D_var, Order(AbilityCommand("SupplyDepotLower", 0)), c_orderQueueAddToEnd);
    }
    Wait(5.0, c_timeGame);
    auto94098376_g = UnitGroupSearch("SupplyDepotLowered", c_playerAny, EventUnitTargetPoint(), 2.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2);
    auto94098376_u = UnitGroupCount(auto94098376_g, c_unitCountAll);
    for (;; auto94098376_u -= 1) {
        auto94098376_var = UnitGroupUnitFromEnd(auto94098376_g, auto94098376_u);
        if (auto94098376_var == null) { break; }
        UnitIssueOrder(auto94098376_var, Order(AbilityCommand("SupplyDepotRaise", 0)), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_pulse_command_Init () {
    gt_pulse_command = TriggerCreate("gt_pulse_command_Func");
    TriggerAddEventUnitAbility(gt_pulse_command, null, AbilityCommand("EMP", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: pulse_burn
//--------------------------------------------------------------------------------------------------
bool gt_pulse_burn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_dUMMY;
    unit lv_u;
    int lv_p;

    // Automatic Variable Declarations
    unitgroup autoFF5575CF_g;
    int autoFF5575CF_u;
    unitgroup autoB928A2E9_g;
    int autoB928A2E9_u;
    const int auto75505257_ae = gv_var_forest_array;
    const int auto75505257_ai = 1;
    unitgroup auto30B2A520_g;
    int auto30B2A520_u;
    const int auto11B4C16F_n = 32;
    int auto11B4C16F_i;
    unitgroup auto163F23F7_g;
    int auto163F23F7_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_environment == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = EventPlayer();
    autoFF5575CF_g = UnitGroup("SpiderMineBurrowed", c_playerAny, RegionCircle(EventUnitTargetPoint(), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFF5575CF_u = UnitGroupCount(autoFF5575CF_g, c_unitCountAll);
    for (;; autoFF5575CF_u -= 1) {
        lv_dUMMY = UnitGroupUnitFromEnd(autoFF5575CF_g, autoFF5575CF_u);
        if (lv_dUMMY == null) { break; }
        if ((libNtve_gf_UnitIsPaused(lv_dUMMY) == false)) {
            UnitSetState(lv_dUMMY, c_unitStatePaused, true);
            autoB928A2E9_g = UnitGroup("Ghost", c_playerAny, RegionCircle(UnitGetPosition(lv_dUMMY), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB928A2E9_u = UnitGroupCount(autoB928A2E9_g, c_unitCountAll);
            for (;; autoB928A2E9_u -= 1) {
                lv_u = UnitGroupUnitFromEnd(autoB928A2E9_g, autoB928A2E9_u);
                if (lv_u == null) { break; }
                if (((libNtve_gf_PlayerIsEnemy(lv_p, UnitGetOwner(lv_u), libNtve_ge_PlayerRelation_Enemy) == true) || (UnitGetOwner(lv_u) == lv_p))) {
                    gf_burnFX(EventUnit(), lv_u, true);
                }

            }
        }

    }
    lv_i = 1;
    for ( ; ( (auto75505257_ai >= 0 && lv_i <= auto75505257_ae) || (auto75505257_ai < 0 && lv_i >= auto75505257_ae) ) ; lv_i += auto75505257_ai ) {
        if ((RegionContainsPoint(gv_coverage_pool_area[lv_i], EventUnitTargetPoint()) == true)) {
            Wait(0.5, c_timeGame);
            auto30B2A520_g = UnitGroup("EMP2Weapon", c_playerAny, gv_coverage_pool_area[lv_i], UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto30B2A520_u = UnitGroupCount(auto30B2A520_g, c_unitCountAll);
            for (;; auto30B2A520_u -= 1) {
                lv_u = UnitGroupUnitFromEnd(auto30B2A520_g, auto30B2A520_u);
                if (lv_u == null) { break; }
                UnitRemove(lv_u);
            }
            SoundPlayAtPoint(SoundLink("Doodad_SparkBurstShort", 0), PlayerGroupAll(), gv_coverage_location[lv_i], 0.0, 100.0, 0.0);
            SoundPlayAtPoint(SoundLink("Doodad_SparkBurstLong", 0), PlayerGroupAll(), gv_coverage_location[lv_i], 0.0, 100.0, 0.0);
            for (auto11B4C16F_i = 1; auto11B4C16F_i <= auto11B4C16F_n; auto11B4C16F_i += 1) {
                auto163F23F7_g = UnitGroup("Ghost", c_playerAny, gv_coverage_pool_area[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto163F23F7_u = UnitGroupCount(auto163F23F7_g, c_unitCountAll);
                for (;; auto163F23F7_u -= 1) {
                    lv_u = UnitGroupUnitFromEnd(auto163F23F7_g, auto163F23F7_u);
                    if (lv_u == null) { break; }
                    if (((libNtve_gf_PlayerIsEnemy(lv_p, UnitGetOwner(lv_u), libNtve_ge_PlayerRelation_Enemy) == true) || (UnitGetOwner(lv_u) == lv_p))) {
                        UnitDamage(EventUnit(), "EMPDamage", lv_u, 100.0);
                    }

                }
                libNtve_gf_CreateModelAtPoint("HighTemplarPsiStormModel", RegionRandomPoint(gv_coverage_pool_area[lv_i]));
                Wait(0.125, c_timeGame);
                libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_pulse_burn_Init () {
    gt_pulse_burn = TriggerCreate("gt_pulse_burn_Func");
    TriggerAddEventUnitAbility(gt_pulse_burn, null, AbilityCommand("EMP", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: pulse_burn_soundloop
//--------------------------------------------------------------------------------------------------
bool gt_pulse_burn_soundloop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_p;
    unit lv_u;
    unit lv_u2;

    // Automatic Variable Declarations
    unitgroup auto50AE34FE_g;
    int auto50AE34FE_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_environment == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u = EventUnit();
    lv_p = UnitGetOwner(lv_u);
    while ((UnitHasBehavior(lv_u, "PulseFlameDeBuff") == true)) {
        UnitDamage(UnitBehaviorEffectUnit(lv_u, "PulseFlameDeBuff", c_effectUnitCaster, 0), "PulseFlameDamage", lv_u, 2.0);
        CameraShakeStart(lv_p, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.05, 10.0, 100.0, 0.1);
        libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionCircle(UnitGetPosition(lv_u), 2.0), c_actorIntersectAgainstCenter, "Signal TreeFire", "Doodad", "");
        auto50AE34FE_g = UnitGroup("Ghost", c_playerAny, RegionCircle(UnitGetPosition(lv_u), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto50AE34FE_u = UnitGroupCount(auto50AE34FE_g, c_unitCountAll);
        for (;; auto50AE34FE_u -= 1) {
            lv_u2 = UnitGroupUnitFromEnd(auto50AE34FE_g, auto50AE34FE_u);
            if (lv_u2 == null) { break; }
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_u), UnitGetOwner(lv_u2), libNtve_ge_PlayerRelation_Enemy) == true)) {
                gf_burnFX(lv_u, lv_u2, true);
            }

        }
        Wait(0.2, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_pulse_burn_soundloop_Init () {
    gt_pulse_burn_soundloop = TriggerCreate("gt_pulse_burn_soundloop_Func");
    TriggerAddEventUnitBehaviorChange(gt_pulse_burn_soundloop, null, "PulseFlameDeBuff", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: railgun_timer
//--------------------------------------------------------------------------------------------------
bool gt_railgun_timer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoCDCA25FE_ae = gv_const_maxdisc;
    const int autoCDCA25FE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_railgun_allowed == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/82CB7827"), libNtve_ge_TipType_NormalTip), StringToText(""), StringExternal("Param/Value/B50915CF"), "Assets\\Textures\\btn-upgrade-terran-corvidreactor.dds");
    gv_railgun_charged = true;
    lv_i = 1;
    for ( ; ( (autoCDCA25FE_ai >= 0 && lv_i <= autoCDCA25FE_ae) || (autoCDCA25FE_ai < 0 && lv_i >= autoCDCA25FE_ae) ) ; lv_i += autoCDCA25FE_ai ) {
        gv_railgun_zoom_active[lv_i] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun_timer_Init () {
    gt_railgun_timer = TriggerCreate("gt_railgun_timer_Func");
    TriggerAddEventTimer(gt_railgun_timer, gv_railgun_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: railgun_zoomout
//--------------------------------------------------------------------------------------------------
bool gt_railgun_zoomout_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetPropertyFixed(gv_sNIPER[EventPlayer()], c_unitPropEnergy, c_unitPropCurrent) >= 100.0) && (gv_railgun_charged == true) && (gv_railgun_zoom_active[EventPlayer()] == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_railgun_zoom_active[EventPlayer()] = true;
    VisRevealerCreate(EventPlayer(), gv_spawn);
    gv_railgun_revealer[EventPlayer()] = VisRevealerLastCreated();
    CameraSetValue(EventPlayer(), c_cameraValueDistance, 50.0, 1.0, -1, 50);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun_zoomout_Init () {
    gt_railgun_zoomout = TriggerCreate("gt_railgun_zoomout_Func");
    TriggerAddEventButtonPressed(gt_railgun_zoomout, c_playerAny, "ResearchRavenEnergyUpgrade");
}

//--------------------------------------------------------------------------------------------------
// Trigger: railgun_cancel
//--------------------------------------------------------------------------------------------------
bool gt_railgun_cancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_railgun_zoom_active[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_railgun_zoom_active[EventPlayer()] = false;
    VisRevealerDestroy(gv_railgun_revealer[EventPlayer()]);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, 10.0, 1.0, -1, 50);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun_cancel_Init () {
    gt_railgun_cancel = TriggerCreate("gt_railgun_cancel_Func");
    TriggerAddEventButtonPressed(gt_railgun_cancel, c_playerAny, "Cancel");
    TriggerAddEventMouseClicked(gt_railgun_cancel, c_playerAny, c_mouseButtonRight, true);
    TriggerAddEventButtonPressed(gt_railgun_cancel, c_playerAny, "Stop");
}

//--------------------------------------------------------------------------------------------------
// Trigger: railgun_line_damage
//--------------------------------------------------------------------------------------------------
bool gt_railgun_line_damage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    point lv_fIRE_OFFSET;
    point lv_tARGET_OFFSET;
    fixed lv_distancia;

    // Automatic Variable Declarations
    int auto682E4D88_ae;
    const int auto682E4D88_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_railgun_charged == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_railgun_zoom_active[EventPlayer()] = false;
    lv_fIRE_OFFSET = UnitGetPosition(EventUnit());
    lv_tARGET_OFFSET = EventUnitTargetPoint();
    lv_distancia = DistanceBetweenPoints(lv_fIRE_OFFSET, lv_tARGET_OFFSET);
    auto682E4D88_ae = FixedToInt((lv_distancia / 1.0));
    lv_i = 1;
    for ( ; ( (auto682E4D88_ai >= 0 && lv_i <= auto682E4D88_ae) || (auto682E4D88_ai < 0 && lv_i >= auto682E4D88_ae) ) ; lv_i += auto682E4D88_ai ) {
        UnitCreateEffectPoint(EventUnit(), "SnipeDamageAOE1_00", libNtve_gf_PointOffsetTowardsPoint(lv_fIRE_OFFSET, (IntToFixed(lv_i) * 1.0), lv_tARGET_OFFSET));
    }
    CameraShakeStart(EventPlayer(), c_cameraPositionTarget, c_cameraDirectionXYZ, 2.5, 10.0, 100.0, 0.1);
    VisRevealerDestroy(gv_railgun_revealer[EventPlayer()]);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, 10.0, 1.0, -1, 50);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun_line_damage_Init () {
    gt_railgun_line_damage = TriggerCreate("gt_railgun_line_damage_Func");
    TriggerAddEventUnitAbility(gt_railgun_line_damage, null, AbilityCommand("NovaSnipe", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: railgun_force_nontarget
//--------------------------------------------------------------------------------------------------
bool gt_railgun_force_nontarget_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitTargetUnit()) != 16))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("NovaSnipe", 0), UnitGetPosition(EventUnitTargetUnit())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun_force_nontarget_Init () {
    gt_railgun_force_nontarget = TriggerCreate("gt_railgun_force_nontarget_Func");
    TriggerAddEventUnitAbility(gt_railgun_force_nontarget, null, AbilityCommand("NovaSnipe", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: death_track
//--------------------------------------------------------------------------------------------------
bool gt_death_track_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_d;
    int lv_r;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Ghost"))) {
            return false;
        }

        if (!((EventPlayer() != gv_const_dummyplayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_a = libNtve_gf_KillingPlayer();
    lv_d = EventPlayer();
    CameraShakeStart(lv_a, c_cameraPositionTarget, c_cameraDirectionXYZ, 0.25, 10.0, 100.0, 0.1);
    gv_shots_hit[lv_a] += 1;
    gv_playtime[lv_a] = FixedToInt(TimerGetElapsed(gv_actionrate_timer[lv_a]));
    gv_playtime[lv_d] = FixedToInt(TimerGetElapsed(gv_actionrate_timer[lv_d]));
    Wait(0.5, c_timeGame);
    gf_update_skill_rates(lv_a);
    gf_update_skill_rates(lv_d);
    gf_data_save(lv_a);
    gf_data_save(lv_d);
    Wait(0.5, c_timeGame);
    gv_shots_hit[lv_a] = 0;
    gv_shots_hit[lv_d] = 0;
    gv_shots_total[lv_a] = 0;
    gv_shots_total[lv_d] = 0;
    gv_playtime[lv_a] = 0;
    gv_playtime[lv_d] = 0;
    libNtve_gf_StopTimer(gv_actionrate_timer[lv_a]);
    libNtve_gf_StopTimer(gv_actionrate_timer[lv_d]);
    TimerStart(gv_actionrate_timer[lv_a], c_timerDurationInfinite, false, c_timeGame);
    Wait(3.0, c_timeGame);
    gf_AI_update_skill_rates();
    gf_activate_spectator(lv_d);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_death_track_Init () {
    gt_death_track = TriggerCreate("gt_death_track_Func");
    TriggerEnable(gt_death_track, false);
    TriggerAddEventUnitDied(gt_death_track, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: playerexit_track
//--------------------------------------------------------------------------------------------------
bool gt_playerexit_track_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_playerexit(lv_p);
    TextTagDestroy(gv_sNIPER_TAG[lv_p]);
    UnitRemove(gv_sNIPER[lv_p]);
    BoardItemSetText(gv_bOARD, 1, (lv_p + 1), StringToText(""));
    BoardItemSetText(gv_bOARD, 2, (lv_p + 1), StringToText(""));
    BoardItemSetText(gv_bOARD, 3, (lv_p + 1), StringToText(""));
    BoardSort(gv_bOARD, 3, false, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_playerexit_track_Init () {
    gt_playerexit_track = TriggerCreate("gt_playerexit_track_Func");
    TriggerAddEventPlayerLeft(gt_playerexit_track, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: board_init
//--------------------------------------------------------------------------------------------------
bool gt_board_init_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    BoardCreate(3, (gv_const_maxdisc + 1), StringExternal("Param/Value/7A315107"), Color(100.00, 100.00, 100.00));
    gv_bOARD = BoardLastCreated();
    BoardItemSetText(gv_bOARD, 1, 1, StringExternal("Param/Value/C840B0AB"));
    BoardItemSetText(gv_bOARD, 2, 1, StringExternal("Param/Value/64807EEF"));
    BoardItemSetText(gv_bOARD, 3, 1, StringExternal("Param/Value/8E24C481"));
    BoardSetColumnWidth(gv_bOARD, 1, 3.0);
    BoardSetColumnWidth(gv_bOARD, 2, 10.0);
    BoardSetColumnWidth(gv_bOARD, 3, 0.1);
    BoardSetState(gv_bOARD, PlayerGroupAll(), c_boardStateSorted, true);
    BoardSetState(gv_bOARD, PlayerGroupAll(), c_boardStateShowHeader, false);
    BoardSetState(gv_bOARD, PlayerGroupAll(), c_boardStateShowing, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_board_init_Init () {
    gt_board_init = TriggerCreate("gt_board_init_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: deselect_track
//--------------------------------------------------------------------------------------------------
bool gt_deselect_track_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(gv_sNIPER[EventPlayer()], EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_deselect_track_Init () {
    gt_deselect_track = TriggerCreate("gt_deselect_track_Func");
    TriggerAddEventUnitSelected(gt_deselect_track, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spectator_enter
//--------------------------------------------------------------------------------------------------
bool gt_spectator_enter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_p;
    int lv_p_target;

    // Automatic Variable Declarations
    int autoC758AD72_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_spectator_enabled[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_p = EventPlayer();
    while (true) {
        autoC758AD72_val = gv_const_gametype;
        if (autoC758AD72_val == 1) {
            lv_p_target = UnitGetOwner(UnitGroupRandomUnit(UnitGroup("Ghost", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        }
        else if (autoC758AD72_val == 2) {
            if ((PlayerGroupHasPlayer(gv_active_player_group_red, lv_p) == true)) {
                lv_p_target = UnitGetOwner(UnitGroupRandomUnit(gv_team_agent[1], c_unitCountAlive));
            }

            if ((PlayerGroupHasPlayer(gv_active_player_group_blue, lv_p) == true)) {
                lv_p_target = UnitGetOwner(UnitGroupRandomUnit(gv_team_agent[2], c_unitCountAlive));
            }

        }
        else {
        }
        if ((gv_spectator_follow_target[lv_p] != lv_p_target)) {
            break;
        }

        if ((gv_spectator_enabled[lv_p] != false)) {
            break;
        }

    }
    gv_spectator_follow_target[lv_p] = lv_p_target;
    CameraLookAtUnit(lv_p, null);
    CameraPan(lv_p, UnitGetPosition(gv_sNIPER[lv_p_target]), 0.0, -1, 50, false);
    CameraFollowUnitGroup(lv_p, libNtve_gf_ConvertUnitToUnitGroup(gv_sNIPER[lv_p_target]), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spectator_enter_Init () {
    gt_spectator_enter = TriggerCreate("gt_spectator_enter_Func");
    TriggerAddEventKeyPressed(gt_spectator_enter, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: myskill
//--------------------------------------------------------------------------------------------------
bool gt_myskill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, IntToText(gv_disc.lv_sKILL_RATE[EventPlayer()]));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, IntToText(gv_disc.lv_aCTION_RATE[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_myskill_Init () {
    gt_myskill = TriggerCreate("gt_myskill_Func");
    TriggerAddEventChatMessage(gt_myskill, c_playerAny, "myskill", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI_loop
//--------------------------------------------------------------------------------------------------
bool gt_AI_loop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_pLAYER_SHOTS_TOTAL;
    int lv_pLAYER_SHOTS_HIT;

    // Automatic Variable Declarations
    const int autoDFDDFBEF_ae = gv_const_maxdisc;
    const int autoDFDDFBEF_ai = 1;
    const int auto7107CB52_ae = gv_const_maxdisc;
    const int auto7107CB52_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_aI_halt = false;
    lv_i = 1;
    for ( ; ( (autoDFDDFBEF_ai >= 0 && lv_i <= autoDFDDFBEF_ae) || (autoDFDDFBEF_ai < 0 && lv_i >= autoDFDDFBEF_ae) ) ; lv_i += autoDFDDFBEF_ai ) {
        if ((gv_aI_active[lv_i] == true)) {
            gf_AI_search_loop(lv_i);
        }

    }
    while (true) {
        lv_i = 1;
        for ( ; ( (auto7107CB52_ai >= 0 && lv_i <= auto7107CB52_ae) || (auto7107CB52_ai < 0 && lv_i >= auto7107CB52_ae) ) ; lv_i += auto7107CB52_ai ) {
            if ((gv_aI_active[lv_i] == true) && (UnitIsAlive(gv_sNIPER[lv_i]) == true)) {
                gf_AI_attempt_move(lv_i, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_team_agent[0], c_unitCountAlive)), 10.0)), false);
            }

        }
        Wait(2.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_loop_Init () {
    gt_AI_loop = TriggerCreate("gt_AI_loop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI_resist
//--------------------------------------------------------------------------------------------------
bool gt_AI_resist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;
    unit lv_u;
    int lv_player;
    unit lv_player_unit;

    // Automatic Variable Declarations
    unitgroup auto4B41B843_g;
    int auto4B41B843_u;

    // Variable Initialization
    lv_player_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B41B843_g = UnitGroupSearch("Ghost", c_playerAny, UnitGetPosition(lv_player_unit), 10.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B41B843_u = UnitGroupCount(auto4B41B843_g, c_unitCountAll);
    for (;; auto4B41B843_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto4B41B843_g, auto4B41B843_u);
        if (lv_u == null) { break; }
        lv_p = UnitGetOwner(lv_u);
        lv_player = UnitGetOwner(lv_player_unit);
        if ((gv_aI_active[lv_p] == true) && (lv_player != lv_p)) {
            if ((RandomInt(1, 1000) <= gv_disc.lv_sKILL_RATE[lv_player])) {
                Wait(RandomFixed(0.1, 0.4), c_timeGame);
                UnitIssueOrder(lv_u, Order(AbilityCommand("Stimpack", 0)), c_orderQueueReplace);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_resist_Init () {
    gt_AI_resist = TriggerCreate("gt_AI_resist_Func");
    TriggerAddEventUnitAbility(gt_AI_resist, null, AbilityCommand("Snipe", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI_test
//--------------------------------------------------------------------------------------------------
bool gt_AI_test_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF29559A6_ae = 4;
    int autoF29559A6_var;

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF29559A6_var = 2;
    for ( ; autoF29559A6_var <= autoF29559A6_ae; autoF29559A6_var += 1 ) {
        gv_player_active[autoF29559A6_var] = true;
        gv_aI_active[autoF29559A6_var] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AI_test_Init () {
    gt_AI_test = TriggerCreate("gt_AI_test_Func");
    TriggerAddEventChatMessage(gt_AI_test, c_playerAny, "test", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: data_verify
//--------------------------------------------------------------------------------------------------
bool gt_data_verify_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string_temp;
    int lv_i;

    // Automatic Variable Declarations
    const int auto1FCF426D_ae = gv_const_maxdisc;
    const int auto1FCF426D_ai = 1;
    bool auto3D93BD74_val;
    const int autoFBE33CC1_ae = 6;
    int autoFBE33CC1_var;

    // Variable Initialization
    lv_string_temp = "";

    // Actions
    if (!runActions) {
        return true;
    }

    gf_discinit();
    lv_i = 1;
    for ( ; ( (auto1FCF426D_ai >= 0 && lv_i <= auto1FCF426D_ae) || (auto1FCF426D_ai < 0 && lv_i >= auto1FCF426D_ae) ) ; lv_i += auto1FCF426D_ai ) {
        if ((PlayerType(lv_i) != c_playerTypeUser)) {
            continue;
        }

        gf_gethandle(lv_i);
        BankLoad("DISC", lv_i);
        gv_disc_array[lv_i] = BankLastCreated();
        auto3D93BD74_val = BankKeyExists(gv_disc_array[lv_i], "DATA", "S");
        if (auto3D93BD74_val == true) {
            lv_string_temp = BankValueGetAsString(gv_disc_array[lv_i], "DATA", "S");
            if (lib1_gf_StarcodeValidateString(lv_string_temp, 4)) {
                lv_string_temp = lib1_gf_StarcodeRemoveHashfromString(lv_string_temp, 4);
                lv_string_temp = lib1_gf_StarcodeDecryptString(lv_string_temp, IntToString(gv_disc.lv_playerhandle[lv_i]));
                autoFBE33CC1_var = 1;
                for ( ; autoFBE33CC1_var <= autoFBE33CC1_ae; autoFBE33CC1_var += 1 ) {
                    lv_string_temp = StringReplaceWord(lv_string_temp, gv_disc.lv_dummy_array[autoFBE33CC1_var], " ", c_stringReplaceAll, c_stringCase);
                }
                gv_disc.lv_bANK_MATCH_TOTAL[lv_i] = StringToInt(StringWord(lv_string_temp, 1));
                gv_disc.lv_sKILL_RATE[lv_i] = StringToInt(StringWord(lv_string_temp, 2));
                gv_disc.lv_aCTION_RATE[lv_i] = StringToInt(StringWord(lv_string_temp, 3));
                if ((gv_disc.lv_bANK_MATCH_TOTAL[lv_i] >= gv_disc.lv_bANK_MATCH_TOTAL[gv_host])) {
                    gv_host = lv_i;
                }

            }

        }
        else if (auto3D93BD74_val == false) {
            gf_data_save(lv_i);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_data_verify_Init () {
    gt_data_verify = TriggerCreate("gt_data_verify_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_init_Init();
    gt_init_menu_Init();
    gt_init_btnswitch_Init();
    gt_init_scorecap_Init();
    gt_init_game_Init();
    gt_track_count_Init();
    gt_init_prestage_Init();
    gt_spawn_protection_Init();
    gt_reset_Init();
    gt_pool_enter_Init();
    gt_coverage_Init();
    gt_volcanoloop_Init();
    gt_suddendeath_Init();
    gt_suddendeath_extend_Init();
    gt_shotline_track_Init();
    gt_force_nontarget_for_humans_Init();
    gt_resist_track_Init();
    gt_pulse_command_Init();
    gt_pulse_burn_Init();
    gt_pulse_burn_soundloop_Init();
    gt_railgun_timer_Init();
    gt_railgun_zoomout_Init();
    gt_railgun_cancel_Init();
    gt_railgun_line_damage_Init();
    gt_railgun_force_nontarget_Init();
    gt_death_track_Init();
    gt_playerexit_track_Init();
    gt_board_init_Init();
    gt_deselect_track_Init();
    gt_spectator_enter_Init();
    gt_myskill_Init();
    gt_AI_loop_Init();
    gt_AI_resist_Init();
    gt_AI_test_Init();
    gt_data_verify_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
